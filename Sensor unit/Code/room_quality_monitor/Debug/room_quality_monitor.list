
room_quality_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005514  08005514  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800551c  0800551c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08005594  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005594  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2e2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6d  00000000  00000000  0002e382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00030cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160bc  00000000  00000000  00031710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec70  00000000  00000000  000477cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088931  00000000  00000000  0005643c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ded6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  000dedc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800532c 	.word	0x0800532c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800532c 	.word	0x0800532c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96e 	b.w	8000dc0 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468c      	mov	ip, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 8083 	bne.w	8000c12 <__udivmoddi4+0x116>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4617      	mov	r7, r2
 8000b10:	d947      	bls.n	8000ba2 <__udivmoddi4+0xa6>
 8000b12:	fab2 f282 	clz	r2, r2
 8000b16:	b142      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	f1c2 0020 	rsb	r0, r2, #32
 8000b1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b20:	4091      	lsls	r1, r2
 8000b22:	4097      	lsls	r7, r2
 8000b24:	ea40 0c01 	orr.w	ip, r0, r1
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbbc f6f8 	udiv	r6, ip, r8
 8000b34:	fa1f fe87 	uxth.w	lr, r7
 8000b38:	fb08 c116 	mls	r1, r8, r6, ip
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb06 f10e 	mul.w	r1, r6, lr
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4e:	f080 8119 	bcs.w	8000d84 <__udivmoddi4+0x288>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8116 	bls.w	8000d84 <__udivmoddi4+0x288>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	443b      	add	r3, r7
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3310 	mls	r3, r8, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b70:	45a6      	cmp	lr, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8105 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b7e:	45a6      	cmp	lr, r4
 8000b80:	f240 8102 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b84:	3802      	subs	r0, #2
 8000b86:	443c      	add	r4, r7
 8000b88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8c:	eba4 040e 	sub.w	r4, r4, lr
 8000b90:	2600      	movs	r6, #0
 8000b92:	b11d      	cbz	r5, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c5 4300 	strd	r4, r3, [r5]
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	b902      	cbnz	r2, 8000ba6 <__udivmoddi4+0xaa>
 8000ba4:	deff      	udf	#255	; 0xff
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d150      	bne.n	8000c50 <__udivmoddi4+0x154>
 8000bae:	1bcb      	subs	r3, r1, r7
 8000bb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	2601      	movs	r6, #1
 8000bba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bbe:	0c21      	lsrs	r1, r4, #16
 8000bc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0xe2>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	f200 80e9 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1ac9      	subs	r1, r1, r3
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x10c>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x10a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80d9 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e7bf      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x12e>
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f000 80b1 	beq.w	8000d7e <__udivmoddi4+0x282>
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c22:	4630      	mov	r0, r6
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f683 	clz	r6, r3
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d14a      	bne.n	8000cc8 <__udivmoddi4+0x1cc>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0x140>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80b8 	bhi.w	8000dac <__udivmoddi4+0x2b0>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	468c      	mov	ip, r1
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d0a8      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000c4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c4e:	e7a5      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f603 	lsr.w	r6, r0, r3
 8000c58:	4097      	lsls	r7, r2
 8000c5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c62:	40d9      	lsrs	r1, r3
 8000c64:	4330      	orrs	r0, r6
 8000c66:	0c03      	lsrs	r3, r0, #16
 8000c68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c6c:	fa1f f887 	uxth.w	r8, r7
 8000c70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb06 f108 	mul.w	r1, r6, r8
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x19c>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c8a:	f080 808d 	bcs.w	8000da8 <__udivmoddi4+0x2ac>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 808a 	bls.w	8000da8 <__udivmoddi4+0x2ac>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b281      	uxth	r1, r0
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb00 f308 	mul.w	r3, r0, r8
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x1c4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb6:	d273      	bcs.n	8000da0 <__udivmoddi4+0x2a4>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d971      	bls.n	8000da0 <__udivmoddi4+0x2a4>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4439      	add	r1, r7
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cc6:	e778      	b.n	8000bba <__udivmoddi4+0xbe>
 8000cc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ccc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cd4:	431c      	orrs	r4, r3
 8000cd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cda:	fa01 f306 	lsl.w	r3, r1, r6
 8000cde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ce2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	0c3b      	lsrs	r3, r7, #16
 8000cea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cee:	fa1f f884 	uxth.w	r8, r4
 8000cf2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cf6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cfe:	458a      	cmp	sl, r1
 8000d00:	fa02 f206 	lsl.w	r2, r2, r6
 8000d04:	fa00 f306 	lsl.w	r3, r0, r6
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x220>
 8000d0a:	1861      	adds	r1, r4, r1
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	d248      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d12:	458a      	cmp	sl, r1
 8000d14:	d946      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4421      	add	r1, r4
 8000d1c:	eba1 010a 	sub.w	r1, r1, sl
 8000d20:	b2bf      	uxth	r7, r7
 8000d22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d2e:	fb00 f808 	mul.w	r8, r0, r8
 8000d32:	45b8      	cmp	r8, r7
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x24a>
 8000d36:	19e7      	adds	r7, r4, r7
 8000d38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3c:	d22e      	bcs.n	8000d9c <__udivmoddi4+0x2a0>
 8000d3e:	45b8      	cmp	r8, r7
 8000d40:	d92c      	bls.n	8000d9c <__udivmoddi4+0x2a0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4427      	add	r7, r4
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	eba7 0708 	sub.w	r7, r7, r8
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	454f      	cmp	r7, r9
 8000d54:	46c6      	mov	lr, r8
 8000d56:	4649      	mov	r1, r9
 8000d58:	d31a      	bcc.n	8000d90 <__udivmoddi4+0x294>
 8000d5a:	d017      	beq.n	8000d8c <__udivmoddi4+0x290>
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x27a>
 8000d5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d62:	eb67 0701 	sbc.w	r7, r7, r1
 8000d66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d6a:	40f2      	lsrs	r2, r6
 8000d6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d70:	40f7      	lsrs	r7, r6
 8000d72:	e9c5 2700 	strd	r2, r7, [r5]
 8000d76:	2600      	movs	r6, #0
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e70b      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6fd      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d8c:	4543      	cmp	r3, r8
 8000d8e:	d2e5      	bcs.n	8000d5c <__udivmoddi4+0x260>
 8000d90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d94:	eb69 0104 	sbc.w	r1, r9, r4
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7df      	b.n	8000d5c <__udivmoddi4+0x260>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e7d2      	b.n	8000d46 <__udivmoddi4+0x24a>
 8000da0:	4660      	mov	r0, ip
 8000da2:	e78d      	b.n	8000cc0 <__udivmoddi4+0x1c4>
 8000da4:	4681      	mov	r9, r0
 8000da6:	e7b9      	b.n	8000d1c <__udivmoddi4+0x220>
 8000da8:	4666      	mov	r6, ip
 8000daa:	e775      	b.n	8000c98 <__udivmoddi4+0x19c>
 8000dac:	4630      	mov	r0, r6
 8000dae:	e74a      	b.n	8000c46 <__udivmoddi4+0x14a>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	4439      	add	r1, r7
 8000db6:	e713      	b.n	8000be0 <__udivmoddi4+0xe4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	443c      	add	r4, r7
 8000dbc:	e724      	b.n	8000c08 <__udivmoddi4+0x10c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	0000      	movs	r0, r0
	...

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09e      	sub	sp, #120	; 0x78
 8000dcc:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef ret;

  uint8_t string_buf[50];
  uint8_t data_buf[6];			// HIH7000 requires 4 bytes, MICSVZ89 requires 6 bytes

  uint8_t status = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  int16_t rawTemp = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  int16_t rawHumid = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

  float humid = 0;
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	667b      	str	r3, [r7, #100]	; 0x64
  float temp = 0;
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	663b      	str	r3, [r7, #96]	; 0x60

  int voc = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	65fb      	str	r3, [r7, #92]	; 0x5c
  int co2 = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fd12 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f966 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 fa80 	bl	8001300 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e00:	f000 fa54 	bl	80012ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e04:	f000 f9cc 	bl	80011a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e08:	f000 fa26 	bl	8001258 <MX_USART1_UART_Init>
  MX_I2S3_Init();
 8000e0c:	f000 f9f6 	bl	80011fc <MX_I2S3_Init>
        	  // ******************************************
        	  // RELTATIVE HUMIDITY AND TEMPERATURE SENSING
        	  // ******************************************

        	  // Manually set what we want to write to the sensor (address)
        	  data_buf[0] = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	733b      	strb	r3, [r7, #12]

        	  // Tell HIH7000 that we want to read from the register
        	  ret = HAL_I2C_Master_Transmit(&hi2c1, HIH7000_ADDR, data_buf, 1, HAL_MAX_DELAY);
 8000e14:	234e      	movs	r3, #78	; 0x4e
 8000e16:	b299      	uxth	r1, r3
 8000e18:	f107 020c 	add.w	r2, r7, #12
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	489c      	ldr	r0, [pc, #624]	; (8001098 <main+0x2d0>)
 8000e26:	f001 f957 	bl	80020d8 <HAL_I2C_Master_Transmit>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        	  HAL_Delay(250);
 8000e30:	20fa      	movs	r0, #250	; 0xfa
 8000e32:	f000 fd65 	bl	8001900 <HAL_Delay>
        	  if ( ret != HAL_OK ) {
 8000e36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d009      	beq.n	8000e52 <main+0x8a>
        		  strcpy((char*)string_buf, "{\"status\": \"error\", \"source\": \"nucleo\", \"msg\": \"Temp&Humid: Error Tx\"}\r\n");}
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4a96      	ldr	r2, [pc, #600]	; (800109c <main+0x2d4>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	4611      	mov	r1, r2
 8000e48:	2349      	movs	r3, #73	; 0x49
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 fe38 	bl	8004ac0 <memcpy>
 8000e50:	e0bd      	b.n	8000fce <main+0x206>
        	  else {
        		  // Read 4 bytes from the HIH7000 register
        		  ret = HAL_I2C_Master_Receive(&hi2c1, HIH7000_ADDR, data_buf, 4, HAL_MAX_DELAY);
 8000e52:	234e      	movs	r3, #78	; 0x4e
 8000e54:	b299      	uxth	r1, r3
 8000e56:	f107 020c 	add.w	r2, r7, #12
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2304      	movs	r3, #4
 8000e62:	488d      	ldr	r0, [pc, #564]	; (8001098 <main+0x2d0>)
 8000e64:	f001 fa36 	bl	80022d4 <HAL_I2C_Master_Receive>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        		  HAL_Delay(250);
 8000e6e:	20fa      	movs	r0, #250	; 0xfa
 8000e70:	f000 fd46 	bl	8001900 <HAL_Delay>
        		  if ( ret != HAL_OK ) {
 8000e74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d009      	beq.n	8000e90 <main+0xc8>
        			  strcpy((char*)string_buf, "{\"status\": \"error\", \"source\": \"nucleo\", \"msg\": \"Temp&Humid: Error Rx\"}\r\n");}
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4a87      	ldr	r2, [pc, #540]	; (80010a0 <main+0x2d8>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	4611      	mov	r1, r2
 8000e86:	2349      	movs	r3, #73	; 0x49
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f003 fe19 	bl	8004ac0 <memcpy>
 8000e8e:	e09e      	b.n	8000fce <main+0x206>
        		  else {

        			  // Process the data

        			  // The two leftmost MSB's of buf[0] are the status bits. We need to shift 6 times to the right to get those.
        			  status = data_buf[0] >> 6;
 8000e90:	7b3b      	ldrb	r3, [r7, #12]
 8000e92:	099b      	lsrs	r3, r3, #6
 8000e94:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

        			  // The next 14 bits are the raw humidity data bits
        			  rawHumid = ((uint16_t)(data_buf[0] & 0x3f) << 8) | data_buf[1];
 8000e98:	7b3b      	ldrb	r3, [r7, #12]
 8000e9a:	021b      	lsls	r3, r3, #8
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	7b7b      	ldrb	r3, [r7, #13]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        			  // The next 14 bits are the raw temperature data bits
        			  rawTemp = (((uint16_t)data_buf[2] << 6) | (data_buf[3] >> 2));
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	019b      	lsls	r3, r3, #6
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

        			  // Process the humidity and temperature data
        			  humid = ((float)rawHumid / 16382.0) * 100.0;
 8000ec2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ece:	ee17 0a90 	vmov	r0, s15
 8000ed2:	f7ff fb41 	bl	8000558 <__aeabi_f2d>
 8000ed6:	a36c      	add	r3, pc, #432	; (adr r3, 8001088 <main+0x2c0>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fcbe 	bl	800085c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <main+0x2dc>)
 8000eee:	f7ff fb8b 	bl	8000608 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd97 	bl	8000a2c <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	667b      	str	r3, [r7, #100]	; 0x64
        			  temp = ((float)rawTemp / 16382.0) * 165.0 - 40.0;
 8000f02:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	ee17 0a90 	vmov	r0, s15
 8000f12:	f7ff fb21 	bl	8000558 <__aeabi_f2d>
 8000f16:	a35c      	add	r3, pc, #368	; (adr r3, 8001088 <main+0x2c0>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	f7ff fc9e 	bl	800085c <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	a359      	add	r3, pc, #356	; (adr r3, 8001090 <main+0x2c8>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff fb6b 	bl	8000608 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <main+0x2e0>)
 8000f40:	f7ff f9aa 	bl	8000298 <__aeabi_dsub>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fd6e 	bl	8000a2c <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	663b      	str	r3, [r7, #96]	; 0x60

        			  // Get the value before and after the decimal point
        			  unsigned int decHumid = (unsigned int) humid;
 8000f54:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5c:	ee17 3a90 	vmov	r3, s15
 8000f60:	657b      	str	r3, [r7, #84]	; 0x54
        			  unsigned int fracHumid = (humid - (float)decHumid)*100;
 8000f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f74:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80010ac <main+0x2e4>
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f80:	ee17 3a90 	vmov	r3, s15
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
        			  unsigned int decTemp = (unsigned int) temp;
 8000f86:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	64fb      	str	r3, [r7, #76]	; 0x4c
        			  unsigned int fracTemp = (temp - (float)decTemp)*100;
 8000f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010ac <main+0x2e4>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb2:	ee17 3a90 	vmov	r3, s15
 8000fb6:	64bb      	str	r3, [r7, #72]	; 0x48

        			  // Create output string
        			  sprintf((char*)string_buf, "{\"lokaal\": \"E119\", \"temperature\": %u.%u, \"humidity\": %u.%u, \"co2\": 0, \"noise\": 0}\r\n", decTemp, fracTemp, decHumid, fracHumid);
 8000fb8:	f107 0014 	add.w	r0, r7, #20
 8000fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fc8:	4939      	ldr	r1, [pc, #228]	; (80010b0 <main+0x2e8>)
 8000fca:	f003 fd8f 	bl	8004aec <siprintf>
        		  }
        	  }

        	  uint8_t data[6];
        	  data[0] = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	713b      	strb	r3, [r7, #4]
        	  HAL_StatusTypeDef result = HAL_I2S_Receive(&hi2s3, &data, 1, HAL_MAX_DELAY);
 8000fd2:	1d39      	adds	r1, r7, #4
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4836      	ldr	r0, [pc, #216]	; (80010b4 <main+0x2ec>)
 8000fdc:	f002 f80e 	bl	8002ffc <HAL_I2S_Receive>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        	  HAL_Delay(250);
 8000fe6:	20fa      	movs	r0, #250	; 0xfa
 8000fe8:	f000 fc8a 	bl	8001900 <HAL_Delay>
			  if ( ret != HAL_OK ) {
 8000fec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d009      	beq.n	8001008 <main+0x240>
				  strcpy((char*)string_buf, "{\"status\": \"error\", \"source\": \"nucleo\", \"msg\": \"Microphone: Error Tx\"}\r\n");}
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <main+0x2f0>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	2349      	movs	r3, #73	; 0x49
 8001000:	461a      	mov	r2, r3
 8001002:	f003 fd5d 	bl	8004ac0 <memcpy>
 8001006:	e01d      	b.n	8001044 <main+0x27c>
			  else {
				  // Read 4 bytes from the HIH7000 register
				  ret = HAL_I2C_Master_Receive(&hi2c1, HIH7000_ADDR, data_buf, 4, HAL_MAX_DELAY);
 8001008:	234e      	movs	r3, #78	; 0x4e
 800100a:	b299      	uxth	r1, r3
 800100c:	f107 020c 	add.w	r2, r7, #12
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2304      	movs	r3, #4
 8001018:	481f      	ldr	r0, [pc, #124]	; (8001098 <main+0x2d0>)
 800101a:	f001 f95b 	bl	80022d4 <HAL_I2C_Master_Receive>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				  HAL_Delay(250);
 8001024:	20fa      	movs	r0, #250	; 0xfa
 8001026:	f000 fc6b 	bl	8001900 <HAL_Delay>
				  if ( ret != HAL_OK ) {
 800102a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <main+0x27c>
					  strcpy((char*)string_buf, "{\"status\": \"error\", \"source\": \"nucleo\", \"msg\": \"Microphone: Error Rx\"}\r\n");}
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4a21      	ldr	r2, [pc, #132]	; (80010bc <main+0x2f4>)
 8001038:	4618      	mov	r0, r3
 800103a:	4611      	mov	r1, r2
 800103c:	2349      	movs	r3, #73	; 0x49
 800103e:	461a      	mov	r2, r3
 8001040:	f003 fd3e 	bl	8004ac0 <memcpy>

				  }
			  }

        	  // Print the output
        	  HAL_UART_Transmit(&huart1, string_buf, strlen((char*)string_buf), HAL_MAX_DELAY);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f8c9 	bl	80001e0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f107 0114 	add.w	r1, r7, #20
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	4819      	ldr	r0, [pc, #100]	; (80010c0 <main+0x2f8>)
 800105c:	f003 fa3d 	bl	80044da <HAL_UART_Transmit>
        	  HAL_UART_Transmit(&huart2, string_buf, strlen((char*)string_buf), HAL_MAX_DELAY);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8bb 	bl	80001e0 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	f107 0114 	add.w	r1, r7, #20
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <main+0x2fc>)
 8001078:	f003 fa2f 	bl	80044da <HAL_UART_Transmit>
        	  HAL_Delay(500);
 800107c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001080:	f000 fc3e 	bl	8001900 <HAL_Delay>
          {
 8001084:	e6c4      	b.n	8000e10 <main+0x48>
 8001086:	bf00      	nop
 8001088:	00000000 	.word	0x00000000
 800108c:	40cfff00 	.word	0x40cfff00
 8001090:	00000000 	.word	0x00000000
 8001094:	4064a000 	.word	0x4064a000
 8001098:	20000098 	.word	0x20000098
 800109c:	08005344 	.word	0x08005344
 80010a0:	08005390 	.word	0x08005390
 80010a4:	40590000 	.word	0x40590000
 80010a8:	40440000 	.word	0x40440000
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	080053dc 	.word	0x080053dc
 80010b4:	20000174 	.word	0x20000174
 80010b8:	08005430 	.word	0x08005430
 80010bc:	0800547c 	.word	0x0800547c
 80010c0:	200000ec 	.word	0x200000ec
 80010c4:	20000130 	.word	0x20000130

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fd00 	bl	8004adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <SystemClock_Config+0xd0>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <SystemClock_Config+0xd0>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <SystemClock_Config+0xd4>)
 8001116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2310      	movs	r3, #16
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001138:	2300      	movs	r3, #0
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800113c:	2310      	movs	r3, #16
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001140:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001146:	2304      	movs	r3, #4
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800114a:	2307      	movs	r3, #7
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fbb4 	bl	80038c0 <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800115e:	f000 f93d 	bl	80013dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	2302      	movs	r3, #2
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fe16 	bl	8003db0 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800118a:	f000 f927 	bl	80013dc <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	; 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <MX_I2C1_Init+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x58>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011de:	f000 fe37 	bl	8001e50 <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f8f8 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000098 	.word	0x20000098
 80011f4:	40005400 	.word	0x40005400
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_I2S3_Init+0x54>)
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <MX_I2S3_Init+0x58>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2S3_Init+0x54>)
 8001208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_I2S3_Init+0x54>)
 8001210:	2210      	movs	r2, #16
 8001212:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_I2S3_Init+0x54>)
 8001216:	2203      	movs	r2, #3
 8001218:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_I2S3_Init+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_I2S3_Init+0x54>)
 8001222:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001226:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_I2S3_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_I2S3_Init+0x54>)
 8001236:	2201      	movs	r2, #1
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_I2S3_Init+0x54>)
 800123c:	f001 fd9e 	bl	8002d7c <HAL_I2S_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001246:	f000 f8c9 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000174 	.word	0x20000174
 8001254:	40003c00 	.word	0x40003c00

08001258 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART1_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001290:	f003 f8d6 	bl	8004440 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f89f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000ec 	.word	0x200000ec
 80012a8:	40011000 	.word	0x40011000

080012ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_USART2_UART_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f003 f8ac 	bl	8004440 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f875 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000130 	.word	0x20000130
 80012fc:	40004400 	.word	0x40004400

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_GPIO_Init+0xd0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a25      	ldr	r2, [pc, #148]	; (80013d0 <MX_GPIO_Init+0xd0>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_GPIO_Init+0xd0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2120      	movs	r1, #32
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <MX_GPIO_Init+0xd4>)
 800138c:	f000 fd46 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001396:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_GPIO_Init+0xd8>)
 80013a8:	f000 fbb4 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ac:	2320      	movs	r3, #32
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0xd4>)
 80013c4:	f000 fba6 	bl	8001b14 <HAL_GPIO_Init>

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020800 	.word	0x40020800

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fb40 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_I2C_MspInit+0x84>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12c      	bne.n	80014b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_I2C_MspInit+0x88>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	; (80014c4 <HAL_I2C_MspInit+0x8c>)
 8001494:	f000 fb3e 	bl	8001b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_I2C_MspInit+0x88>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a39      	ldr	r2, [pc, #228]	; (80015dc <HAL_I2S_MspInit+0x114>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d16b      	bne.n	80015d2 <HAL_I2S_MspInit+0x10a>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fe4c 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001516:	f7ff ff61 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 8001524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_I2S_MspInit+0x118>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800156e:	2310      	movs	r3, #16
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800157e:	2306      	movs	r3, #6
 8001580:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001586:	4619      	mov	r1, r3
 8001588:	4816      	ldr	r0, [pc, #88]	; (80015e4 <HAL_I2S_MspInit+0x11c>)
 800158a:	f000 fac3 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800158e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a0:	2306      	movs	r3, #6
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a8:	4619      	mov	r1, r3
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <HAL_I2S_MspInit+0x120>)
 80015ac:	f000 fab2 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80015c2:	2305      	movs	r3, #5
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <HAL_I2S_MspInit+0x120>)
 80015ce:	f000 faa1 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3740      	adds	r7, #64	; 0x40
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40003c00 	.word	0x40003c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020800 	.word	0x40020800

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <HAL_UART_MspInit+0xe8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12d      	bne.n	800166a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a30      	ldr	r2, [pc, #192]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_UART_MspInit+0xec>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001646:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	481e      	ldr	r0, [pc, #120]	; (80016dc <HAL_UART_MspInit+0xf0>)
 8001664:	f000 fa56 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001668:	e030      	b.n	80016cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_UART_MspInit+0xf4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d12b      	bne.n	80016cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_UART_MspInit+0xec>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_UART_MspInit+0xec>)
 800167e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_UART_MspInit+0xec>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_UART_MspInit+0xec>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_UART_MspInit+0xec>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ac:	230c      	movs	r3, #12
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016bc:	2307      	movs	r3, #7
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_UART_MspInit+0xf0>)
 80016c8:	f000 fa24 	bl	8001b14 <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40004400 	.word	0x40004400

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f8c6 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f003 f980 	bl	8004a6c <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20018000 	.word	0x20018000
 8001798:	00000400 	.word	0x00000400
 800179c:	2000008c 	.word	0x2000008c
 80017a0:	200001d0 	.word	0x200001d0

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f003 f93f 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fae5 	bl	8000dc8 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800180c:	08005524 	.word	0x08005524
  ldr r2, =_sbss
 8001810:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001814:	200001d0 	.word	0x200001d0

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f931 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fdca 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f93b 	bl	8001afa <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f911 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	200001bc 	.word	0x200001bc

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200001bc 	.word	0x200001bc

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff47 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff5c 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffb0 	bl	8001a68 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e159      	b.n	8001de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8148 	bne.w	8001dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d005      	beq.n	8001b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d130      	bne.n	8001bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 0201 	and.w	r2, r3, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d017      	beq.n	8001c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a2 	beq.w	8001dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a49      	ldr	r2, [pc, #292]	; (8001e04 <HAL_GPIO_Init+0x2f0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x202>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a48      	ldr	r2, [pc, #288]	; (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x1fe>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x1f6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a45      	ldr	r2, [pc, #276]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x1f2>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d84:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f aea2 	bls.w	8001b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e12b      	b.n	80020ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fade 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eb4:	f002 f950 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8001eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a81      	ldr	r2, [pc, #516]	; (80020c4 <HAL_I2C_Init+0x274>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d807      	bhi.n	8001ed4 <HAL_I2C_Init+0x84>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a80      	ldr	r2, [pc, #512]	; (80020c8 <HAL_I2C_Init+0x278>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e006      	b.n	8001ee2 <HAL_I2C_Init+0x92>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a7d      	ldr	r2, [pc, #500]	; (80020cc <HAL_I2C_Init+0x27c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf94      	ite	ls
 8001edc:	2301      	movls	r3, #1
 8001ede:	2300      	movhi	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0e7      	b.n	80020ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4a78      	ldr	r2, [pc, #480]	; (80020d0 <HAL_I2C_Init+0x280>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0c9b      	lsrs	r3, r3, #18
 8001ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_I2C_Init+0x274>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d802      	bhi.n	8001f24 <HAL_I2C_Init+0xd4>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	e009      	b.n	8001f38 <HAL_I2C_Init+0xe8>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	4a69      	ldr	r2, [pc, #420]	; (80020d4 <HAL_I2C_Init+0x284>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	099b      	lsrs	r3, r3, #6
 8001f36:	3301      	adds	r3, #1
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	495c      	ldr	r1, [pc, #368]	; (80020c4 <HAL_I2C_Init+0x274>)
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d819      	bhi.n	8001f8c <HAL_I2C_Init+0x13c>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e59      	subs	r1, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f66:	1c59      	adds	r1, r3, #1
 8001f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_I2C_Init+0x138>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1e59      	subs	r1, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f86:	e051      	b.n	800202c <HAL_I2C_Init+0x1dc>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e04f      	b.n	800202c <HAL_I2C_Init+0x1dc>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d111      	bne.n	8001fb8 <HAL_I2C_Init+0x168>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	440b      	add	r3, r1
 8001fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e012      	b.n	8001fde <HAL_I2C_Init+0x18e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	0099      	lsls	r1, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Init+0x196>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e022      	b.n	800202c <HAL_I2C_Init+0x1dc>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10e      	bne.n	800200c <HAL_I2C_Init+0x1bc>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e58      	subs	r0, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	440b      	add	r3, r1
 8001ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002000:	3301      	adds	r3, #1
 8002002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200a:	e00f      	b.n	800202c <HAL_I2C_Init+0x1dc>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e58      	subs	r0, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	0099      	lsls	r1, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	3301      	adds	r3, #1
 8002024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	6809      	ldr	r1, [r1, #0]
 8002030:	4313      	orrs	r3, r2
 8002032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800205a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6911      	ldr	r1, [r2, #16]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	430b      	orrs	r3, r1
 800206e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	000186a0 	.word	0x000186a0
 80020c8:	001e847f 	.word	0x001e847f
 80020cc:	003d08ff 	.word	0x003d08ff
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	10624dd3 	.word	0x10624dd3

080020d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	461a      	mov	r2, r3
 80020e4:	460b      	mov	r3, r1
 80020e6:	817b      	strh	r3, [r7, #10]
 80020e8:	4613      	mov	r3, r2
 80020ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff fbfc 	bl	80018e8 <HAL_GetTick>
 80020f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	f040 80e0 	bne.w	80022c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2319      	movs	r3, #25
 8002106:	2201      	movs	r2, #1
 8002108:	4970      	ldr	r1, [pc, #448]	; (80022cc <HAL_I2C_Master_Transmit+0x1f4>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fc58 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002116:	2302      	movs	r3, #2
 8002118:	e0d3      	b.n	80022c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_I2C_Master_Transmit+0x50>
 8002124:	2302      	movs	r3, #2
 8002126:	e0cc      	b.n	80022c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d007      	beq.n	800214e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2221      	movs	r2, #33	; 0x21
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2210      	movs	r2, #16
 800216a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	893a      	ldrh	r2, [r7, #8]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a50      	ldr	r2, [pc, #320]	; (80022d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002190:	8979      	ldrh	r1, [r7, #10]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fac2 	bl	8002720 <I2C_MasterRequestWrite>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e08d      	b.n	80022c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021bc:	e066      	b.n	800228c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6a39      	ldr	r1, [r7, #32]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fcd2 	bl	8002b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d11b      	bne.n	8002260 <HAL_I2C_Master_Transmit+0x188>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d017      	beq.n	8002260 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	6a39      	ldr	r1, [r7, #32]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fcc2 	bl	8002bee <I2C_WaitOnBTFFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b04      	cmp	r3, #4
 8002276:	d107      	bne.n	8002288 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002286:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e01a      	b.n	80022c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d194      	bne.n	80021be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00100002 	.word	0x00100002
 80022d0:	ffff0000 	.word	0xffff0000

080022d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	461a      	mov	r2, r3
 80022e0:	460b      	mov	r3, r1
 80022e2:	817b      	strh	r3, [r7, #10]
 80022e4:	4613      	mov	r3, r2
 80022e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff fafe 	bl	80018e8 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	f040 820b 	bne.w	8002712 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2319      	movs	r3, #25
 8002302:	2201      	movs	r2, #1
 8002304:	497c      	ldr	r1, [pc, #496]	; (80024f8 <HAL_I2C_Master_Receive+0x224>)
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fb5a 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	e1fe      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_I2C_Master_Receive+0x50>
 8002320:	2302      	movs	r3, #2
 8002322:	e1f7      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d007      	beq.n	800234a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002358:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2222      	movs	r2, #34	; 0x22
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2210      	movs	r2, #16
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	893a      	ldrh	r2, [r7, #8]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a5c      	ldr	r2, [pc, #368]	; (80024fc <HAL_I2C_Master_Receive+0x228>)
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fa46 	bl	8002824 <I2C_MasterRequestRead>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1b8      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d113      	bne.n	80023d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	623b      	str	r3, [r7, #32]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e18c      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d11b      	bne.n	8002412 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e16c      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	2b02      	cmp	r3, #2
 8002418:	d11b      	bne.n	8002452 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002428:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	e14c      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002478:	e138      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	2b03      	cmp	r3, #3
 8002480:	f200 80f1 	bhi.w	8002666 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b01      	cmp	r3, #1
 800248a:	d123      	bne.n	80024d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fbed 	bl	8002c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e139      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d2:	e10b      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d14e      	bne.n	800257a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	2200      	movs	r2, #0
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <HAL_I2C_Master_Receive+0x22c>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fa6a 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e10e      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
 80024f6:	bf00      	nop
 80024f8:	00100002 	.word	0x00100002
 80024fc:	ffff0000 	.word	0xffff0000
 8002500:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002578:	e0b8      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	2200      	movs	r2, #0
 8002582:	4966      	ldr	r1, [pc, #408]	; (800271c <HAL_I2C_Master_Receive+0x448>)
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fa1b 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0bf      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	2200      	movs	r2, #0
 80025de:	494f      	ldr	r1, [pc, #316]	; (800271c <HAL_I2C_Master_Receive+0x448>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f9ed 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e091      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002664:	e042      	b.n	80026ec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fb00 	bl	8002c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e04c      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d118      	bne.n	80026ec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f aec2 	bne.w	800247a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3728      	adds	r7, #40	; 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	00010004 	.word	0x00010004

08002720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d006      	beq.n	800274a <I2C_MasterRequestWrite+0x2a>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d003      	beq.n	800274a <I2C_MasterRequestWrite+0x2a>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002748:	d108      	bne.n	800275c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e00b      	b.n	8002774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	2b12      	cmp	r3, #18
 8002762:	d107      	bne.n	8002774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f91d 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279a:	d103      	bne.n	80027a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e035      	b.n	8002814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b0:	d108      	bne.n	80027c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c0:	611a      	str	r2, [r3, #16]
 80027c2:	e01b      	b.n	80027fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	11db      	asrs	r3, r3, #7
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0306 	and.w	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f063 030f 	orn	r3, r3, #15
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <I2C_MasterRequestWrite+0xfc>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f943 	bl	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e010      	b.n	8002814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <I2C_MasterRequestWrite+0x100>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f933 	bl	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	00010008 	.word	0x00010008
 8002820:	00010002 	.word	0x00010002

08002824 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d006      	beq.n	800285e <I2C_MasterRequestRead+0x3a>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d003      	beq.n	800285e <I2C_MasterRequestRead+0x3a>
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800285c:	d108      	bne.n	8002870 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e00b      	b.n	8002888 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	2b11      	cmp	r3, #17
 8002876:	d107      	bne.n	8002888 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f893 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d103      	bne.n	80028b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e079      	b.n	80029b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c4:	d108      	bne.n	80028d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028c6:	897b      	ldrh	r3, [r7, #10]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]
 80028d6:	e05f      	b.n	8002998 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028d8:	897b      	ldrh	r3, [r7, #10]
 80028da:	11db      	asrs	r3, r3, #7
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 0306 	and.w	r3, r3, #6
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f063 030f 	orn	r3, r3, #15
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4930      	ldr	r1, [pc, #192]	; (80029b8 <I2C_MasterRequestRead+0x194>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f8b9 	bl	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e054      	b.n	80029b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4929      	ldr	r1, [pc, #164]	; (80029bc <I2C_MasterRequestRead+0x198>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8a9 	bl	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e044      	b.n	80029b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f831 	bl	80029c0 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002972:	d103      	bne.n	800297c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e017      	b.n	80029b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	11db      	asrs	r3, r3, #7
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0306 	and.w	r3, r3, #6
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f063 030e 	orn	r3, r3, #14
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <I2C_MasterRequestRead+0x198>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f865 	bl	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	00010008 	.word	0x00010008
 80029bc:	00010002 	.word	0x00010002

080029c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d0:	e025      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d021      	beq.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7fe ff85 	bl	80018e8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e023      	b.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10d      	bne.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	e00c      	b.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d0b6      	beq.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7c:	e051      	b.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8c:	d123      	bne.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e046      	b.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d021      	beq.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7fe ff03 	bl	80018e8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e020      	b.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10c      	bne.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e00b      	b.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d18d      	bne.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b78:	e02d      	b.n	8002bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8ce 	bl	8002d1c <I2C_IsAcknowledgeFailed>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e02d      	b.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d021      	beq.n	8002bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b92:	f7fe fea9 	bl	80018e8 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d302      	bcc.n	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d116      	bne.n	8002bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e007      	b.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d1ca      	bne.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bfa:	e02d      	b.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f88d 	bl	8002d1c <I2C_IsAcknowledgeFailed>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e02d      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d021      	beq.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c14:	f7fe fe68 	bl	80018e8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d1ca      	bne.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c7c:	e042      	b.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d119      	bne.n	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0210 	mvn.w	r2, #16
 8002c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e029      	b.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc0:	f7fe fe12 	bl	80018e8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d302      	bcc.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e007      	b.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d1b5      	bne.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d11b      	bne.n	8002d6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f043 0204 	orr.w	r2, r3, #4
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e128      	b.n	8002fe0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a90      	ldr	r2, [pc, #576]	; (8002fe8 <HAL_I2S_Init+0x26c>)
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe fb8d 	bl	80014c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002dc4:	f023 030f 	bic.w	r3, r3, #15
 8002dc8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d060      	beq.n	8002e9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002de2:	2310      	movs	r3, #16
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e001      	b.n	8002dec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d802      	bhi.n	8002dfa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f001 fac2 	bl	8004384 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0a:	d125      	bne.n	8002e58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	3305      	adds	r3, #5
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e01f      	b.n	8002e76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	3305      	adds	r3, #5
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	e00e      	b.n	8002e76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	3305      	adds	r3, #5
 8002e74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <HAL_I2S_Init+0x270>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e003      	b.n	8002ea4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d902      	bls.n	8002eb0 <HAL_I2S_Init+0x134>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2bff      	cmp	r3, #255	; 0xff
 8002eae:	d907      	bls.n	8002ec0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e08f      	b.n	8002fe0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	ea42 0103 	orr.w	r1, r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ede:	f023 030f 	bic.w	r3, r3, #15
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6851      	ldr	r1, [r2, #4]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6892      	ldr	r2, [r2, #8]
 8002eea:	4311      	orrs	r1, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68d2      	ldr	r2, [r2, #12]
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6992      	ldr	r2, [r2, #24]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d161      	bne.n	8002fd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <HAL_I2S_Init+0x274>)
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <HAL_I2S_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2S_Init+0x1a4>
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_I2S_Init+0x27c>)
 8002f1e:	e001      	b.n	8002f24 <HAL_I2S_Init+0x1a8>
 8002f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	4932      	ldr	r1, [pc, #200]	; (8002ff4 <HAL_I2S_Init+0x278>)
 8002f2c:	428a      	cmp	r2, r1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2S_Init+0x1b8>
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_I2S_Init+0x27c>)
 8002f32:	e001      	b.n	8002f38 <HAL_I2S_Init+0x1bc>
 8002f34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f3c:	f023 030f 	bic.w	r3, r3, #15
 8002f40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <HAL_I2S_Init+0x278>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2S_Init+0x1d4>
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_I2S_Init+0x27c>)
 8002f4e:	e001      	b.n	8002f54 <HAL_I2S_Init+0x1d8>
 8002f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f54:	2202      	movs	r2, #2
 8002f56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <HAL_I2S_Init+0x278>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_I2S_Init+0x1ea>
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_I2S_Init+0x27c>)
 8002f64:	e001      	b.n	8002f6a <HAL_I2S_Init+0x1ee>
 8002f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f76:	d003      	beq.n	8002f80 <HAL_I2S_Init+0x204>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	e001      	b.n	8002f8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002faa:	4313      	orrs	r3, r2
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_I2S_Init+0x278>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2S_Init+0x24c>
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_I2S_Init+0x27c>)
 8002fc6:	e001      	b.n	8002fcc <HAL_I2S_Init+0x250>
 8002fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fcc:	897a      	ldrh	r2, [r7, #10]
 8002fce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08003285 	.word	0x08003285
 8002fec:	cccccccd 	.word	0xcccccccd
 8002ff0:	0800340d 	.word	0x0800340d
 8002ff4:	40003800 	.word	0x40003800
 8002ff8:	40003400 	.word	0x40003400

08002ffc <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_I2S_Receive+0x1c>
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0b4      	b.n	8003186 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_I2S_Receive+0x30>
 8003028:	2302      	movs	r3, #2
 800302a:	e0ac      	b.n	8003186 <HAL_I2S_Receive+0x18a>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d005      	beq.n	800304c <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	e09c      	b.n	8003186 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2204      	movs	r2, #4
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d002      	beq.n	8003078 <HAL_I2S_Receive+0x7c>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10a      	bne.n	800308e <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	865a      	strh	r2, [r3, #50]	; 0x32
 800308c:	e005      	b.n	800309a <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	d007      	beq.n	80030ba <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030b8:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c8:	d14f      	bne.n	800316a <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 80030e0:	e043      	b.n	800316a <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	2101      	movs	r1, #1
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f955 	bl	8003398 <I2S_WaitFlagStateUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00f      	beq.n	8003114 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e038      	b.n	8003186 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	b292      	uxth	r2, r2
 8003120:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d110      	bne.n	800316a <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1b6      	bne.n	80030e2 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	881a      	ldrh	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c9a      	adds	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10e      	bne.n	800321e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800320e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffb8 	bl	800318e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	b292      	uxth	r2, r2
 800323a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	1c9a      	adds	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800326c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ff93 	bl	80031a2 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b04      	cmp	r3, #4
 800329e:	d13a      	bne.n	8003316 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d109      	bne.n	80032be <I2S_IRQHandler+0x3a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d102      	bne.n	80032be <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffb4 	bl	8003226 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d126      	bne.n	8003316 <I2S_IRQHandler+0x92>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d11f      	bne.n	8003316 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032e4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f043 0202 	orr.w	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff50 	bl	80031b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b03      	cmp	r3, #3
 8003320:	d136      	bne.n	8003390 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d109      	bne.n	8003340 <I2S_IRQHandler+0xbc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d102      	bne.n	8003340 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff45 	bl	80031ca <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d122      	bne.n	8003390 <I2S_IRQHandler+0x10c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b20      	cmp	r3, #32
 8003356:	d11b      	bne.n	8003390 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003366:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f043 0204 	orr.w	r2, r3, #4
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff13 	bl	80031b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a8:	f7fe fa9e 	bl	80018e8 <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80033ae:	e018      	b.n	80033e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d014      	beq.n	80033e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80033b8:	f7fe fa96 	bl	80018e8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d902      	bls.n	80033ce <I2S_WaitFlagStateUntilTimeout+0x36>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e00f      	b.n	8003402 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d1d7      	bne.n	80033b0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4aa2      	ldr	r2, [pc, #648]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d101      	bne.n	800342a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003426:	4ba2      	ldr	r3, [pc, #648]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003428:	e001      	b.n	800342e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800342a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a9b      	ldr	r2, [pc, #620]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003444:	4b9a      	ldr	r3, [pc, #616]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003446:	e001      	b.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003458:	d004      	beq.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 8099 	bne.w	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d107      	bne.n	800347e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f925 	bl	80036c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d107      	bne.n	8003498 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9c8 	bl	8003828 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d13a      	bne.n	8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d035      	beq.n	8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a7e      	ldr	r2, [pc, #504]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034b6:	4b7e      	ldr	r3, [pc, #504]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034b8:	e001      	b.n	80034be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4979      	ldr	r1, [pc, #484]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034c6:	428b      	cmp	r3, r1
 80034c8:	d101      	bne.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034ca:	4b79      	ldr	r3, [pc, #484]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034cc:	e001      	b.n	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f043 0202 	orr.w	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fe4f 	bl	80031b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	f040 80be 	bne.w	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80b8 	beq.w	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a59      	ldr	r2, [pc, #356]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800354a:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800354c:	e001      	b.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800354e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4954      	ldr	r1, [pc, #336]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800355a:	428b      	cmp	r3, r1
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800356a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fe11 	bl	80031b6 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003594:	e084      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d107      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8be 	bl	800372c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8fd 	bl	80037c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d12f      	bne.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02a      	beq.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035fa:	e001      	b.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4929      	ldr	r1, [pc, #164]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003608:	428b      	cmp	r3, r1
 800360a:	d101      	bne.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800360e:	e001      	b.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003618:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f043 0202 	orr.w	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fdc1 	bl	80031b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d131      	bne.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02c      	beq.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d101      	bne.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003654:	e001      	b.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4912      	ldr	r1, [pc, #72]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003662:	428b      	cmp	r3, r1
 8003664:	d101      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003668:	e001      	b.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003672:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003682:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	f043 0204 	orr.w	r2, r3, #4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fd8c 	bl	80031b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800369e:	e000      	b.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a0:	bf00      	nop
}
 80036a2:	bf00      	nop
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40003800 	.word	0x40003800
 80036b0:	40003400 	.word	0x40003400

080036b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c99      	adds	r1, r3, #2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6251      	str	r1, [r2, #36]	; 0x24
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003708:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ffc9 	bl	80036b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c99      	adds	r1, r3, #2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6251      	str	r1, [r2, #36]	; 0x24
 800373e:	8819      	ldrh	r1, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <I2SEx_TxISR_I2SExt+0x90>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <I2SEx_TxISR_I2SExt+0x22>
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <I2SEx_TxISR_I2SExt+0x94>)
 800374c:	e001      	b.n	8003752 <I2SEx_TxISR_I2SExt+0x26>
 800374e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003752:	460a      	mov	r2, r1
 8003754:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d121      	bne.n	80037b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <I2SEx_TxISR_I2SExt+0x90>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <I2SEx_TxISR_I2SExt+0x50>
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <I2SEx_TxISR_I2SExt+0x94>)
 800377a:	e001      	b.n	8003780 <I2SEx_TxISR_I2SExt+0x54>
 800377c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	490d      	ldr	r1, [pc, #52]	; (80037bc <I2SEx_TxISR_I2SExt+0x90>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d101      	bne.n	8003790 <I2SEx_TxISR_I2SExt+0x64>
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <I2SEx_TxISR_I2SExt+0x94>)
 800378e:	e001      	b.n	8003794 <I2SEx_TxISR_I2SExt+0x68>
 8003790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003794:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003798:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff81 	bl	80036b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40003800 	.word	0x40003800
 80037c0:	40003400 	.word	0x40003400

080037c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68d8      	ldr	r0, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	1c99      	adds	r1, r3, #2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037dc:	b282      	uxth	r2, r0
 80037de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d113      	bne.n	8003820 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003806:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff4a 	bl	80036b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <I2SEx_RxISR_I2SExt+0x90>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <I2SEx_RxISR_I2SExt+0x16>
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <I2SEx_RxISR_I2SExt+0x94>)
 800383c:	e001      	b.n	8003842 <I2SEx_RxISR_I2SExt+0x1a>
 800383e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003842:	68d8      	ldr	r0, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	1c99      	adds	r1, r3, #2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800384e:	b282      	uxth	r2, r0
 8003850:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d121      	bne.n	80038ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <I2SEx_RxISR_I2SExt+0x90>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <I2SEx_RxISR_I2SExt+0x50>
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <I2SEx_RxISR_I2SExt+0x94>)
 8003876:	e001      	b.n	800387c <I2SEx_RxISR_I2SExt+0x54>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	490d      	ldr	r1, [pc, #52]	; (80038b8 <I2SEx_RxISR_I2SExt+0x90>)
 8003884:	428b      	cmp	r3, r1
 8003886:	d101      	bne.n	800388c <I2SEx_RxISR_I2SExt+0x64>
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <I2SEx_RxISR_I2SExt+0x94>)
 800388a:	e001      	b.n	8003890 <I2SEx_RxISR_I2SExt+0x68>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003890:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003894:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ff03 	bl	80036b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40003800 	.word	0x40003800
 80038bc:	40003400 	.word	0x40003400

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e264      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d075      	beq.n	80039ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038de:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d00c      	beq.n	8003904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4ba0      	ldr	r3, [pc, #640]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d112      	bne.n	800391c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b9d      	ldr	r3, [pc, #628]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b99      	ldr	r3, [pc, #612]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05b      	beq.n	80039c8 <HAL_RCC_OscConfig+0x108>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d157      	bne.n	80039c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e23f      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x74>
 8003926:	4b91      	ldr	r3, [pc, #580]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a90      	ldr	r2, [pc, #576]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xb0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x98>
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a8a      	ldr	r2, [pc, #552]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a87      	ldr	r2, [pc, #540]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xb0>
 8003958:	4b84      	ldr	r3, [pc, #528]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a83      	ldr	r2, [pc, #524]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd ffb6 	bl	80018e8 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7fd ffb2 	bl	80018e8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e204      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xc0>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fd ffa2 	bl	80018e8 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd ff9e 	bl	80018e8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1f0      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b6c      	ldr	r3, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0xe8>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d063      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b62      	ldr	r3, [pc, #392]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	4b5c      	ldr	r3, [pc, #368]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x152>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1c4      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b56      	ldr	r3, [pc, #344]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4952      	ldr	r1, [pc, #328]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	e03a      	b.n	8003a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a30:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_RCC_OscConfig+0x2b0>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd ff57 	bl	80018e8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3e:	f7fd ff53 	bl	80018e8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1a5      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b43      	ldr	r3, [pc, #268]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4940      	ldr	r1, [pc, #256]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
 8003a70:	e015      	b.n	8003a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <HAL_RCC_OscConfig+0x2b0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd ff36 	bl	80018e8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a80:	f7fd ff32 	bl	80018e8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e184      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x2b4>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fd ff16 	bl	80018e8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fd ff12 	bl	80018e8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e164      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x200>
 8003ade:	e015      	b.n	8003b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x2b4>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd feff 	bl	80018e8 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aee:	f7fd fefb 	bl	80018e8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e14d      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80a0 	beq.w	8003c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x2b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d121      	bne.n	8003b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCC_OscConfig+0x2b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_RCC_OscConfig+0x2b8>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fec1 	bl	80018e8 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e011      	b.n	8003b8e <HAL_RCC_OscConfig+0x2ce>
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
 8003b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fd feb4 	bl	80018e8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e106      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b85      	ldr	r3, [pc, #532]	; (8003da4 <HAL_RCC_OscConfig+0x4e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
 8003ba2:	4b81      	ldr	r3, [pc, #516]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	e01c      	b.n	8003bea <HAL_RCC_OscConfig+0x32a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x312>
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a7a      	ldr	r2, [pc, #488]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	e00b      	b.n	8003bea <HAL_RCC_OscConfig+0x32a>
 8003bd2:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a74      	ldr	r2, [pc, #464]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a71      	ldr	r2, [pc, #452]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d015      	beq.n	8003c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fe79 	bl	80018e8 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fd fe75 	bl	80018e8 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0c5      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ee      	beq.n	8003bfa <HAL_RCC_OscConfig+0x33a>
 8003c1c:	e014      	b.n	8003c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fe63 	bl	80018e8 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fd fe5f 	bl	80018e8 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0af      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3c:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ee      	bne.n	8003c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a55      	ldr	r2, [pc, #340]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 809b 	beq.w	8003d9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d05c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d141      	bne.n	8003cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_OscConfig+0x4ec>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fe33 	bl	80018e8 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fd fe2f 	bl	80018e8 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e081      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c98:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	019b      	lsls	r3, r3, #6
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
 8003cc8:	4937      	ldr	r1, [pc, #220]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_OscConfig+0x4ec>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fe08 	bl	80018e8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd fe04 	bl	80018e8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e056      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x41c>
 8003cfa:	e04e      	b.n	8003d9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x4ec>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd fdf1 	bl	80018e8 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd fded 	bl	80018e8 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e03f      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x44a>
 8003d28:	e037      	b.n	8003d9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e032      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d028      	beq.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d121      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d11a      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d66:	4013      	ands	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40007000 	.word	0x40007000
 8003da8:	40023800 	.word	0x40023800
 8003dac:	42470060 	.word	0x42470060

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0cc      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d90c      	bls.n	8003dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0b8      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e04:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a52      	ldr	r2, [pc, #328]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	494d      	ldr	r1, [pc, #308]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d044      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d119      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e07f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e06f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e067      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4934      	ldr	r1, [pc, #208]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7fd fd22 	bl	80018e8 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea8:	f7fd fd1e 	bl	80018e8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e04f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 020c 	and.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1eb      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d20c      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e032      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4916      	ldr	r1, [pc, #88]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	490e      	ldr	r1, [pc, #56]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f36:	f000 f821 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	490a      	ldr	r1, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	5ccb      	ldrb	r3, [r1, r3]
 8003f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd fc82 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023c00 	.word	0x40023c00
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	080054c8 	.word	0x080054c8
 8003f74:	20000000 	.word	0x20000000
 8003f78:	20000004 	.word	0x20000004

08003f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f94:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d00d      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x40>
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	f200 80bd 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fae:	e0b7      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fb2:	60bb      	str	r3, [r7, #8]
       break;
 8003fb4:	e0b7      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb6:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fb8:	60bb      	str	r3, [r7, #8]
      break;
 8003fba:	e0b4      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04d      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	ea02 0800 	and.w	r8, r2, r0
 8003fea:	ea03 0901 	and.w	r9, r3, r1
 8003fee:	4640      	mov	r0, r8
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	014b      	lsls	r3, r1, #5
 8003ffc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004000:	0142      	lsls	r2, r0, #5
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	ebb0 0008 	subs.w	r0, r0, r8
 800400a:	eb61 0109 	sbc.w	r1, r1, r9
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	018b      	lsls	r3, r1, #6
 8004018:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800401c:	0182      	lsls	r2, r0, #6
 800401e:	1a12      	subs	r2, r2, r0
 8004020:	eb63 0301 	sbc.w	r3, r3, r1
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	00d9      	lsls	r1, r3, #3
 800402e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004032:	00d0      	lsls	r0, r2, #3
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	eb12 0208 	adds.w	r2, r2, r8
 800403c:	eb43 0309 	adc.w	r3, r3, r9
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	0259      	lsls	r1, r3, #9
 800404a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800404e:	0250      	lsls	r0, r2, #9
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	f7fc fd34 	bl	8000acc <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4613      	mov	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e04a      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	461a      	mov	r2, r3
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	ea02 0400 	and.w	r4, r2, r0
 8004086:	ea03 0501 	and.w	r5, r3, r1
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	014b      	lsls	r3, r1, #5
 8004098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800409c:	0142      	lsls	r2, r0, #5
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	1b00      	subs	r0, r0, r4
 80040a4:	eb61 0105 	sbc.w	r1, r1, r5
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	018b      	lsls	r3, r1, #6
 80040b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040b6:	0182      	lsls	r2, r0, #6
 80040b8:	1a12      	subs	r2, r2, r0
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	00d9      	lsls	r1, r3, #3
 80040c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040cc:	00d0      	lsls	r0, r2, #3
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	1912      	adds	r2, r2, r4
 80040d4:	eb45 0303 	adc.w	r3, r5, r3
 80040d8:	f04f 0000 	mov.w	r0, #0
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	0299      	lsls	r1, r3, #10
 80040e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040e6:	0290      	lsls	r0, r2, #10
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	f7fc fce8 	bl	8000acc <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	60bb      	str	r3, [r7, #8]
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004122:	60bb      	str	r3, [r7, #8]
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	68bb      	ldr	r3, [r7, #8]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	080054d8 	.word	0x080054d8

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffdc 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0b5b      	lsrs	r3, r3, #13
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	080054d8 	.word	0x080054d8

080041a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d035      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d0:	4b67      	ldr	r3, [pc, #412]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041d6:	f7fd fb87 	bl	80018e8 <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041de:	f7fd fb83 	bl	80018e8 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0ba      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f0:	4b60      	ldr	r3, [pc, #384]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	019a      	lsls	r2, r3, #6
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	071b      	lsls	r3, r3, #28
 8004208:	495a      	ldr	r1, [pc, #360]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004210:	4b57      	ldr	r3, [pc, #348]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004216:	f7fd fb67 	bl	80018e8 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800421e:	f7fd fb63 	bl	80018e8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e09a      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004230:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8083 	beq.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a48      	ldr	r2, [pc, #288]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b46      	ldr	r3, [pc, #280]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004266:	4b44      	ldr	r3, [pc, #272]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a43      	ldr	r2, [pc, #268]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fd fb39 	bl	80018e8 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fd fb35 	bl	80018e8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e06c      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004298:	4b36      	ldr	r3, [pc, #216]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d028      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c0:	4b2e      	ldr	r3, [pc, #184]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042cc:	4a29      	ldr	r2, [pc, #164]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d114      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042de:	f7fd fb03 	bl	80018e8 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd faff 	bl	80018e8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e034      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ee      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004314:	d10d      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	4912      	ldr	r1, [pc, #72]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]
 8004330:	e005      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434a:	490a      	ldr	r1, [pc, #40]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7c1a      	ldrb	r2, [r3, #16]
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004362:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	42470068 	.word	0x42470068
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000
 800437c:	42470e40 	.word	0x42470e40
 8004380:	424711e0 	.word	0x424711e0

08004384 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d13e      	bne.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043a2:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d12f      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043ba:	617b      	str	r3, [r7, #20]
          break;
 80043bc:	e02f      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ca:	d108      	bne.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e007      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004408:	0f1b      	lsrs	r3, r3, #28
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
          break;
 8004416:	e002      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
          break;
 800441c:	bf00      	nop
        }
      }
      break;
 800441e:	bf00      	nop
    }
  }
  return frequency;
 8004420:	697b      	ldr	r3, [r7, #20]
}
 8004422:	4618      	mov	r0, r3
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00bb8000 	.word	0x00bb8000
 8004438:	007a1200 	.word	0x007a1200
 800443c:	00f42400 	.word	0x00f42400

08004440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e03f      	b.n	80044d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd f8c0 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f929 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d17c      	bne.n	80045f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Transmit+0x2c>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e075      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit+0x3e>
 8004514:	2302      	movs	r3, #2
 8004516:	e06e      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2221      	movs	r2, #33	; 0x21
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fd f9db 	bl	80018e8 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x82>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800456c:	e02a      	b.n	80045c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f840 	bl	80045fe <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cf      	bne.n	800456e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f810 	bl	80045fe <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b090      	sub	sp, #64	; 0x40
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460e:	e050      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d04c      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <UART_WaitOnFlagUntilTimeout+0x30>
 800461e:	f7fd f963 	bl	80018e8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462a:	429a      	cmp	r2, r3
 800462c:	d241      	bcs.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800464e:	637a      	str	r2, [r7, #52]	; 0x34
 8004650:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e5      	bne.n	800462e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3314      	adds	r3, #20
 8004668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	613b      	str	r3, [r7, #16]
   return(result);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004682:	623a      	str	r2, [r7, #32]
 8004684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	69f9      	ldr	r1, [r7, #28]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d09f      	beq.n	8004610 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3740      	adds	r7, #64	; 0x40
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	b09f      	sub	sp, #124	; 0x7c
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	68d9      	ldr	r1, [r3, #12]
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	ea40 0301 	orr.w	r3, r0, r1
 80046fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	431a      	orrs	r2, r3
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	431a      	orrs	r2, r3
 800470e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4313      	orrs	r3, r2
 8004714:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004720:	f021 010c 	bic.w	r1, r1, #12
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800472a:	430b      	orrs	r3, r1
 800472c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800472e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	6999      	ldr	r1, [r3, #24]
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	ea40 0301 	orr.w	r3, r0, r1
 8004744:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4bc5      	ldr	r3, [pc, #788]	; (8004a60 <UART_SetConfig+0x384>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d004      	beq.n	800475a <UART_SetConfig+0x7e>
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4bc3      	ldr	r3, [pc, #780]	; (8004a64 <UART_SetConfig+0x388>)
 8004756:	429a      	cmp	r2, r3
 8004758:	d103      	bne.n	8004762 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800475a:	f7ff fd11 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 800475e:	6778      	str	r0, [r7, #116]	; 0x74
 8004760:	e002      	b.n	8004768 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004762:	f7ff fcf9 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8004766:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004770:	f040 80b6 	bne.w	80048e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004776:	461c      	mov	r4, r3
 8004778:	f04f 0500 	mov.w	r5, #0
 800477c:	4622      	mov	r2, r4
 800477e:	462b      	mov	r3, r5
 8004780:	1891      	adds	r1, r2, r2
 8004782:	6439      	str	r1, [r7, #64]	; 0x40
 8004784:	415b      	adcs	r3, r3
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
 8004788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800478c:	1912      	adds	r2, r2, r4
 800478e:	eb45 0303 	adc.w	r3, r5, r3
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	00d9      	lsls	r1, r3, #3
 800479c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a0:	00d0      	lsls	r0, r2, #3
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	1911      	adds	r1, r2, r4
 80047a8:	6639      	str	r1, [r7, #96]	; 0x60
 80047aa:	416b      	adcs	r3, r5
 80047ac:	667b      	str	r3, [r7, #100]	; 0x64
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80047bc:	415b      	adcs	r3, r3
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047c8:	f7fc f980 	bl	8000acc <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4ba5      	ldr	r3, [pc, #660]	; (8004a68 <UART_SetConfig+0x38c>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	011e      	lsls	r6, r3, #4
 80047da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047dc:	461c      	mov	r4, r3
 80047de:	f04f 0500 	mov.w	r5, #0
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	1891      	adds	r1, r2, r2
 80047e8:	6339      	str	r1, [r7, #48]	; 0x30
 80047ea:	415b      	adcs	r3, r3
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
 80047ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047f2:	1912      	adds	r2, r2, r4
 80047f4:	eb45 0303 	adc.w	r3, r5, r3
 80047f8:	f04f 0000 	mov.w	r0, #0
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	00d9      	lsls	r1, r3, #3
 8004802:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004806:	00d0      	lsls	r0, r2, #3
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	1911      	adds	r1, r2, r4
 800480e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004810:	416b      	adcs	r3, r5
 8004812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	1891      	adds	r1, r2, r2
 8004820:	62b9      	str	r1, [r7, #40]	; 0x28
 8004822:	415b      	adcs	r3, r3
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800482e:	f7fc f94d 	bl	8000acc <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b8c      	ldr	r3, [pc, #560]	; (8004a68 <UART_SetConfig+0x38c>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a87      	ldr	r2, [pc, #540]	; (8004a68 <UART_SetConfig+0x38c>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004858:	441e      	add	r6, r3
 800485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485c:	4618      	mov	r0, r3
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	1894      	adds	r4, r2, r2
 8004868:	623c      	str	r4, [r7, #32]
 800486a:	415b      	adcs	r3, r3
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004872:	1812      	adds	r2, r2, r0
 8004874:	eb41 0303 	adc.w	r3, r1, r3
 8004878:	f04f 0400 	mov.w	r4, #0
 800487c:	f04f 0500 	mov.w	r5, #0
 8004880:	00dd      	lsls	r5, r3, #3
 8004882:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004886:	00d4      	lsls	r4, r2, #3
 8004888:	4622      	mov	r2, r4
 800488a:	462b      	mov	r3, r5
 800488c:	1814      	adds	r4, r2, r0
 800488e:	653c      	str	r4, [r7, #80]	; 0x50
 8004890:	414b      	adcs	r3, r1
 8004892:	657b      	str	r3, [r7, #84]	; 0x54
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	461a      	mov	r2, r3
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	1891      	adds	r1, r2, r2
 80048a0:	61b9      	str	r1, [r7, #24]
 80048a2:	415b      	adcs	r3, r3
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80048ae:	f7fc f90d 	bl	8000acc <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <UART_SetConfig+0x38c>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a67      	ldr	r2, [pc, #412]	; (8004a68 <UART_SetConfig+0x38c>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	f003 0207 	and.w	r2, r3, #7
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4432      	add	r2, r6
 80048dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048de:	e0b9      	b.n	8004a54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e2:	461c      	mov	r4, r3
 80048e4:	f04f 0500 	mov.w	r5, #0
 80048e8:	4622      	mov	r2, r4
 80048ea:	462b      	mov	r3, r5
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	6139      	str	r1, [r7, #16]
 80048f0:	415b      	adcs	r3, r3
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048f8:	1912      	adds	r2, r2, r4
 80048fa:	eb45 0303 	adc.w	r3, r5, r3
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	00d9      	lsls	r1, r3, #3
 8004908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800490c:	00d0      	lsls	r0, r2, #3
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	eb12 0804 	adds.w	r8, r2, r4
 8004916:	eb43 0905 	adc.w	r9, r3, r5
 800491a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	008b      	lsls	r3, r1, #2
 800492e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004932:	0082      	lsls	r2, r0, #2
 8004934:	4640      	mov	r0, r8
 8004936:	4649      	mov	r1, r9
 8004938:	f7fc f8c8 	bl	8000acc <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <UART_SetConfig+0x38c>)
 8004942:	fba3 2302 	umull	r2, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	011e      	lsls	r6, r3, #4
 800494a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494c:	4618      	mov	r0, r3
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	1894      	adds	r4, r2, r2
 8004958:	60bc      	str	r4, [r7, #8]
 800495a:	415b      	adcs	r3, r3
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004962:	1812      	adds	r2, r2, r0
 8004964:	eb41 0303 	adc.w	r3, r1, r3
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	f04f 0500 	mov.w	r5, #0
 8004970:	00dd      	lsls	r5, r3, #3
 8004972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004976:	00d4      	lsls	r4, r2, #3
 8004978:	4622      	mov	r2, r4
 800497a:	462b      	mov	r3, r5
 800497c:	1814      	adds	r4, r2, r0
 800497e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004980:	414b      	adcs	r3, r1
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4618      	mov	r0, r3
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	008b      	lsls	r3, r1, #2
 8004998:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800499c:	0082      	lsls	r2, r0, #2
 800499e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049a2:	f7fc f893 	bl	8000acc <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b2f      	ldr	r3, [pc, #188]	; (8004a68 <UART_SetConfig+0x38c>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	; 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <UART_SetConfig+0x38c>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ca:	441e      	add	r6, r3
 80049cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ce:	4618      	mov	r0, r3
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	1894      	adds	r4, r2, r2
 80049da:	603c      	str	r4, [r7, #0]
 80049dc:	415b      	adcs	r3, r3
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e4:	1812      	adds	r2, r2, r0
 80049e6:	eb41 0303 	adc.w	r3, r1, r3
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	f04f 0500 	mov.w	r5, #0
 80049f2:	00dd      	lsls	r5, r3, #3
 80049f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049f8:	00d4      	lsls	r4, r2, #3
 80049fa:	4622      	mov	r2, r4
 80049fc:	462b      	mov	r3, r5
 80049fe:	eb12 0a00 	adds.w	sl, r2, r0
 8004a02:	eb43 0b01 	adc.w	fp, r3, r1
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	008b      	lsls	r3, r1, #2
 8004a1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a1e:	0082      	lsls	r2, r0, #2
 8004a20:	4650      	mov	r0, sl
 8004a22:	4659      	mov	r1, fp
 8004a24:	f7fc f852 	bl	8000acc <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <UART_SetConfig+0x38c>)
 8004a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2164      	movs	r1, #100	; 0x64
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	3332      	adds	r3, #50	; 0x32
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <UART_SetConfig+0x38c>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	f003 020f 	and.w	r2, r3, #15
 8004a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4432      	add	r2, r6
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	bf00      	nop
 8004a56:	377c      	adds	r7, #124	; 0x7c
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	bf00      	nop
 8004a60:	40011000 	.word	0x40011000
 8004a64:	40011400 	.word	0x40011400
 8004a68:	51eb851f 	.word	0x51eb851f

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4d0d      	ldr	r5, [pc, #52]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2600      	movs	r6, #0
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4d0b      	ldr	r5, [pc, #44]	; (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 fc4e 	bl	800532c <_init>
 8004a90:	1b64      	subs	r4, r4, r5
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2600      	movs	r6, #0
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	0800551c 	.word	0x0800551c
 8004ab4:	0800551c 	.word	0x0800551c
 8004ab8:	0800551c 	.word	0x0800551c
 8004abc:	08005520 	.word	0x08005520

08004ac0 <memcpy>:
 8004ac0:	440a      	add	r2, r1
 8004ac2:	4291      	cmp	r1, r2
 8004ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ac8:	d100      	bne.n	8004acc <memcpy+0xc>
 8004aca:	4770      	bx	lr
 8004acc:	b510      	push	{r4, lr}
 8004ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	d1f9      	bne.n	8004ace <memcpy+0xe>
 8004ada:	bd10      	pop	{r4, pc}

08004adc <memset>:
 8004adc:	4402      	add	r2, r0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>

08004aec <siprintf>:
 8004aec:	b40e      	push	{r1, r2, r3}
 8004aee:	b500      	push	{lr}
 8004af0:	b09c      	sub	sp, #112	; 0x70
 8004af2:	ab1d      	add	r3, sp, #116	; 0x74
 8004af4:	9002      	str	r0, [sp, #8]
 8004af6:	9006      	str	r0, [sp, #24]
 8004af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004afc:	4809      	ldr	r0, [pc, #36]	; (8004b24 <siprintf+0x38>)
 8004afe:	9107      	str	r1, [sp, #28]
 8004b00:	9104      	str	r1, [sp, #16]
 8004b02:	4909      	ldr	r1, [pc, #36]	; (8004b28 <siprintf+0x3c>)
 8004b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b08:	9105      	str	r1, [sp, #20]
 8004b0a:	6800      	ldr	r0, [r0, #0]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	a902      	add	r1, sp, #8
 8004b10:	f000 f868 	bl	8004be4 <_svfiprintf_r>
 8004b14:	9b02      	ldr	r3, [sp, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	b01c      	add	sp, #112	; 0x70
 8004b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b20:	b003      	add	sp, #12
 8004b22:	4770      	bx	lr
 8004b24:	2000000c 	.word	0x2000000c
 8004b28:	ffff0208 	.word	0xffff0208

08004b2c <__ssputs_r>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	688e      	ldr	r6, [r1, #8]
 8004b32:	429e      	cmp	r6, r3
 8004b34:	4682      	mov	sl, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4690      	mov	r8, r2
 8004b3a:	461f      	mov	r7, r3
 8004b3c:	d838      	bhi.n	8004bb0 <__ssputs_r+0x84>
 8004b3e:	898a      	ldrh	r2, [r1, #12]
 8004b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b44:	d032      	beq.n	8004bac <__ssputs_r+0x80>
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	6909      	ldr	r1, [r1, #16]
 8004b4a:	eba5 0901 	sub.w	r9, r5, r1
 8004b4e:	6965      	ldr	r5, [r4, #20]
 8004b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b58:	3301      	adds	r3, #1
 8004b5a:	444b      	add	r3, r9
 8004b5c:	106d      	asrs	r5, r5, #1
 8004b5e:	429d      	cmp	r5, r3
 8004b60:	bf38      	it	cc
 8004b62:	461d      	movcc	r5, r3
 8004b64:	0553      	lsls	r3, r2, #21
 8004b66:	d531      	bpl.n	8004bcc <__ssputs_r+0xa0>
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f000 fb39 	bl	80051e0 <_malloc_r>
 8004b6e:	4606      	mov	r6, r0
 8004b70:	b950      	cbnz	r0, 8004b88 <__ssputs_r+0x5c>
 8004b72:	230c      	movs	r3, #12
 8004b74:	f8ca 3000 	str.w	r3, [sl]
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	6921      	ldr	r1, [r4, #16]
 8004b8a:	464a      	mov	r2, r9
 8004b8c:	f7ff ff98 	bl	8004ac0 <memcpy>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	6126      	str	r6, [r4, #16]
 8004b9e:	6165      	str	r5, [r4, #20]
 8004ba0:	444e      	add	r6, r9
 8004ba2:	eba5 0509 	sub.w	r5, r5, r9
 8004ba6:	6026      	str	r6, [r4, #0]
 8004ba8:	60a5      	str	r5, [r4, #8]
 8004baa:	463e      	mov	r6, r7
 8004bac:	42be      	cmp	r6, r7
 8004bae:	d900      	bls.n	8004bb2 <__ssputs_r+0x86>
 8004bb0:	463e      	mov	r6, r7
 8004bb2:	4632      	mov	r2, r6
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	f000 faa8 	bl	800510c <memmove>
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	1b9b      	subs	r3, r3, r6
 8004bc2:	4432      	add	r2, r6
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e7db      	b.n	8004b84 <__ssputs_r+0x58>
 8004bcc:	462a      	mov	r2, r5
 8004bce:	f000 fb61 	bl	8005294 <_realloc_r>
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d1e1      	bne.n	8004b9c <__ssputs_r+0x70>
 8004bd8:	6921      	ldr	r1, [r4, #16]
 8004bda:	4650      	mov	r0, sl
 8004bdc:	f000 fab0 	bl	8005140 <_free_r>
 8004be0:	e7c7      	b.n	8004b72 <__ssputs_r+0x46>
	...

08004be4 <_svfiprintf_r>:
 8004be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	4698      	mov	r8, r3
 8004bea:	898b      	ldrh	r3, [r1, #12]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	b09d      	sub	sp, #116	; 0x74
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	d50e      	bpl.n	8004c16 <_svfiprintf_r+0x32>
 8004bf8:	690b      	ldr	r3, [r1, #16]
 8004bfa:	b963      	cbnz	r3, 8004c16 <_svfiprintf_r+0x32>
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	f000 faef 	bl	80051e0 <_malloc_r>
 8004c02:	6028      	str	r0, [r5, #0]
 8004c04:	6128      	str	r0, [r5, #16]
 8004c06:	b920      	cbnz	r0, 8004c12 <_svfiprintf_r+0x2e>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	e0d1      	b.n	8004db6 <_svfiprintf_r+0x1d2>
 8004c12:	2340      	movs	r3, #64	; 0x40
 8004c14:	616b      	str	r3, [r5, #20]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1a:	2320      	movs	r3, #32
 8004c1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c24:	2330      	movs	r3, #48	; 0x30
 8004c26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dd0 <_svfiprintf_r+0x1ec>
 8004c2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c2e:	f04f 0901 	mov.w	r9, #1
 8004c32:	4623      	mov	r3, r4
 8004c34:	469a      	mov	sl, r3
 8004c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c3a:	b10a      	cbz	r2, 8004c40 <_svfiprintf_r+0x5c>
 8004c3c:	2a25      	cmp	r2, #37	; 0x25
 8004c3e:	d1f9      	bne.n	8004c34 <_svfiprintf_r+0x50>
 8004c40:	ebba 0b04 	subs.w	fp, sl, r4
 8004c44:	d00b      	beq.n	8004c5e <_svfiprintf_r+0x7a>
 8004c46:	465b      	mov	r3, fp
 8004c48:	4622      	mov	r2, r4
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f7ff ff6d 	bl	8004b2c <__ssputs_r>
 8004c52:	3001      	adds	r0, #1
 8004c54:	f000 80aa 	beq.w	8004dac <_svfiprintf_r+0x1c8>
 8004c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c5a:	445a      	add	r2, fp
 8004c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80a2 	beq.w	8004dac <_svfiprintf_r+0x1c8>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c72:	f10a 0a01 	add.w	sl, sl, #1
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	9307      	str	r3, [sp, #28]
 8004c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c80:	4654      	mov	r4, sl
 8004c82:	2205      	movs	r2, #5
 8004c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c88:	4851      	ldr	r0, [pc, #324]	; (8004dd0 <_svfiprintf_r+0x1ec>)
 8004c8a:	f7fb fab1 	bl	80001f0 <memchr>
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	b9d8      	cbnz	r0, 8004cca <_svfiprintf_r+0xe6>
 8004c92:	06d0      	lsls	r0, r2, #27
 8004c94:	bf44      	itt	mi
 8004c96:	2320      	movmi	r3, #32
 8004c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c9c:	0711      	lsls	r1, r2, #28
 8004c9e:	bf44      	itt	mi
 8004ca0:	232b      	movmi	r3, #43	; 0x2b
 8004ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8004caa:	2b2a      	cmp	r3, #42	; 0x2a
 8004cac:	d015      	beq.n	8004cda <_svfiprintf_r+0xf6>
 8004cae:	9a07      	ldr	r2, [sp, #28]
 8004cb0:	4654      	mov	r4, sl
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f04f 0c0a 	mov.w	ip, #10
 8004cb8:	4621      	mov	r1, r4
 8004cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cbe:	3b30      	subs	r3, #48	; 0x30
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d94e      	bls.n	8004d62 <_svfiprintf_r+0x17e>
 8004cc4:	b1b0      	cbz	r0, 8004cf4 <_svfiprintf_r+0x110>
 8004cc6:	9207      	str	r2, [sp, #28]
 8004cc8:	e014      	b.n	8004cf4 <_svfiprintf_r+0x110>
 8004cca:	eba0 0308 	sub.w	r3, r0, r8
 8004cce:	fa09 f303 	lsl.w	r3, r9, r3
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	46a2      	mov	sl, r4
 8004cd8:	e7d2      	b.n	8004c80 <_svfiprintf_r+0x9c>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	1d19      	adds	r1, r3, #4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	9103      	str	r1, [sp, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bfbb      	ittet	lt
 8004ce6:	425b      	neglt	r3, r3
 8004ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cec:	9307      	strge	r3, [sp, #28]
 8004cee:	9307      	strlt	r3, [sp, #28]
 8004cf0:	bfb8      	it	lt
 8004cf2:	9204      	strlt	r2, [sp, #16]
 8004cf4:	7823      	ldrb	r3, [r4, #0]
 8004cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf8:	d10c      	bne.n	8004d14 <_svfiprintf_r+0x130>
 8004cfa:	7863      	ldrb	r3, [r4, #1]
 8004cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfe:	d135      	bne.n	8004d6c <_svfiprintf_r+0x188>
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	9203      	str	r2, [sp, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bfb8      	it	lt
 8004d0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d10:	3402      	adds	r4, #2
 8004d12:	9305      	str	r3, [sp, #20]
 8004d14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004de0 <_svfiprintf_r+0x1fc>
 8004d18:	7821      	ldrb	r1, [r4, #0]
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4650      	mov	r0, sl
 8004d1e:	f7fb fa67 	bl	80001f0 <memchr>
 8004d22:	b140      	cbz	r0, 8004d36 <_svfiprintf_r+0x152>
 8004d24:	2340      	movs	r3, #64	; 0x40
 8004d26:	eba0 000a 	sub.w	r0, r0, sl
 8004d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d2e:	9b04      	ldr	r3, [sp, #16]
 8004d30:	4303      	orrs	r3, r0
 8004d32:	3401      	adds	r4, #1
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d3a:	4826      	ldr	r0, [pc, #152]	; (8004dd4 <_svfiprintf_r+0x1f0>)
 8004d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d40:	2206      	movs	r2, #6
 8004d42:	f7fb fa55 	bl	80001f0 <memchr>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d038      	beq.n	8004dbc <_svfiprintf_r+0x1d8>
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <_svfiprintf_r+0x1f4>)
 8004d4c:	bb1b      	cbnz	r3, 8004d96 <_svfiprintf_r+0x1b2>
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	3307      	adds	r3, #7
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	3308      	adds	r3, #8
 8004d58:	9303      	str	r3, [sp, #12]
 8004d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5c:	4433      	add	r3, r6
 8004d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d60:	e767      	b.n	8004c32 <_svfiprintf_r+0x4e>
 8004d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d66:	460c      	mov	r4, r1
 8004d68:	2001      	movs	r0, #1
 8004d6a:	e7a5      	b.n	8004cb8 <_svfiprintf_r+0xd4>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	3401      	adds	r4, #1
 8004d70:	9305      	str	r3, [sp, #20]
 8004d72:	4619      	mov	r1, r3
 8004d74:	f04f 0c0a 	mov.w	ip, #10
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d7e:	3a30      	subs	r2, #48	; 0x30
 8004d80:	2a09      	cmp	r2, #9
 8004d82:	d903      	bls.n	8004d8c <_svfiprintf_r+0x1a8>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0c5      	beq.n	8004d14 <_svfiprintf_r+0x130>
 8004d88:	9105      	str	r1, [sp, #20]
 8004d8a:	e7c3      	b.n	8004d14 <_svfiprintf_r+0x130>
 8004d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d90:	4604      	mov	r4, r0
 8004d92:	2301      	movs	r3, #1
 8004d94:	e7f0      	b.n	8004d78 <_svfiprintf_r+0x194>
 8004d96:	ab03      	add	r3, sp, #12
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	462a      	mov	r2, r5
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <_svfiprintf_r+0x1f8>)
 8004d9e:	a904      	add	r1, sp, #16
 8004da0:	4638      	mov	r0, r7
 8004da2:	f3af 8000 	nop.w
 8004da6:	1c42      	adds	r2, r0, #1
 8004da8:	4606      	mov	r6, r0
 8004daa:	d1d6      	bne.n	8004d5a <_svfiprintf_r+0x176>
 8004dac:	89ab      	ldrh	r3, [r5, #12]
 8004dae:	065b      	lsls	r3, r3, #25
 8004db0:	f53f af2c 	bmi.w	8004c0c <_svfiprintf_r+0x28>
 8004db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db6:	b01d      	add	sp, #116	; 0x74
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	ab03      	add	r3, sp, #12
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <_svfiprintf_r+0x1f8>)
 8004dc4:	a904      	add	r1, sp, #16
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f000 f87a 	bl	8004ec0 <_printf_i>
 8004dcc:	e7eb      	b.n	8004da6 <_svfiprintf_r+0x1c2>
 8004dce:	bf00      	nop
 8004dd0:	080054e0 	.word	0x080054e0
 8004dd4:	080054ea 	.word	0x080054ea
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	08004b2d 	.word	0x08004b2d
 8004de0:	080054e6 	.word	0x080054e6

08004de4 <_printf_common>:
 8004de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	4616      	mov	r6, r2
 8004dea:	4699      	mov	r9, r3
 8004dec:	688a      	ldr	r2, [r1, #8]
 8004dee:	690b      	ldr	r3, [r1, #16]
 8004df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df4:	4293      	cmp	r3, r2
 8004df6:	bfb8      	it	lt
 8004df8:	4613      	movlt	r3, r2
 8004dfa:	6033      	str	r3, [r6, #0]
 8004dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e00:	4607      	mov	r7, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	b10a      	cbz	r2, 8004e0a <_printf_common+0x26>
 8004e06:	3301      	adds	r3, #1
 8004e08:	6033      	str	r3, [r6, #0]
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	0699      	lsls	r1, r3, #26
 8004e0e:	bf42      	ittt	mi
 8004e10:	6833      	ldrmi	r3, [r6, #0]
 8004e12:	3302      	addmi	r3, #2
 8004e14:	6033      	strmi	r3, [r6, #0]
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	f015 0506 	ands.w	r5, r5, #6
 8004e1c:	d106      	bne.n	8004e2c <_printf_common+0x48>
 8004e1e:	f104 0a19 	add.w	sl, r4, #25
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	6832      	ldr	r2, [r6, #0]
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	42ab      	cmp	r3, r5
 8004e2a:	dc26      	bgt.n	8004e7a <_printf_common+0x96>
 8004e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e30:	1e13      	subs	r3, r2, #0
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	bf18      	it	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	0692      	lsls	r2, r2, #26
 8004e3a:	d42b      	bmi.n	8004e94 <_printf_common+0xb0>
 8004e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e40:	4649      	mov	r1, r9
 8004e42:	4638      	mov	r0, r7
 8004e44:	47c0      	blx	r8
 8004e46:	3001      	adds	r0, #1
 8004e48:	d01e      	beq.n	8004e88 <_printf_common+0xa4>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	68e5      	ldr	r5, [r4, #12]
 8004e4e:	6832      	ldr	r2, [r6, #0]
 8004e50:	f003 0306 	and.w	r3, r3, #6
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	bf08      	it	eq
 8004e58:	1aad      	subeq	r5, r5, r2
 8004e5a:	68a3      	ldr	r3, [r4, #8]
 8004e5c:	6922      	ldr	r2, [r4, #16]
 8004e5e:	bf0c      	ite	eq
 8004e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e64:	2500      	movne	r5, #0
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bfc4      	itt	gt
 8004e6a:	1a9b      	subgt	r3, r3, r2
 8004e6c:	18ed      	addgt	r5, r5, r3
 8004e6e:	2600      	movs	r6, #0
 8004e70:	341a      	adds	r4, #26
 8004e72:	42b5      	cmp	r5, r6
 8004e74:	d11a      	bne.n	8004eac <_printf_common+0xc8>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e008      	b.n	8004e8c <_printf_common+0xa8>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	4649      	mov	r1, r9
 8004e80:	4638      	mov	r0, r7
 8004e82:	47c0      	blx	r8
 8004e84:	3001      	adds	r0, #1
 8004e86:	d103      	bne.n	8004e90 <_printf_common+0xac>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e90:	3501      	adds	r5, #1
 8004e92:	e7c6      	b.n	8004e22 <_printf_common+0x3e>
 8004e94:	18e1      	adds	r1, r4, r3
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	2030      	movs	r0, #48	; 0x30
 8004e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e9e:	4422      	add	r2, r4
 8004ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	e7c7      	b.n	8004e3c <_printf_common+0x58>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4622      	mov	r2, r4
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d0e6      	beq.n	8004e88 <_printf_common+0xa4>
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7d9      	b.n	8004e72 <_printf_common+0x8e>
	...

08004ec0 <_printf_i>:
 8004ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	4691      	mov	r9, r2
 8004ec8:	7e27      	ldrb	r7, [r4, #24]
 8004eca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ecc:	2f78      	cmp	r7, #120	; 0x78
 8004ece:	4680      	mov	r8, r0
 8004ed0:	469a      	mov	sl, r3
 8004ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed6:	d807      	bhi.n	8004ee8 <_printf_i+0x28>
 8004ed8:	2f62      	cmp	r7, #98	; 0x62
 8004eda:	d80a      	bhi.n	8004ef2 <_printf_i+0x32>
 8004edc:	2f00      	cmp	r7, #0
 8004ede:	f000 80d8 	beq.w	8005092 <_printf_i+0x1d2>
 8004ee2:	2f58      	cmp	r7, #88	; 0x58
 8004ee4:	f000 80a3 	beq.w	800502e <_printf_i+0x16e>
 8004ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ef0:	e03a      	b.n	8004f68 <_printf_i+0xa8>
 8004ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ef6:	2b15      	cmp	r3, #21
 8004ef8:	d8f6      	bhi.n	8004ee8 <_printf_i+0x28>
 8004efa:	a001      	add	r0, pc, #4	; (adr r0, 8004f00 <_printf_i+0x40>)
 8004efc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f00:	08004f59 	.word	0x08004f59
 8004f04:	08004f6d 	.word	0x08004f6d
 8004f08:	08004ee9 	.word	0x08004ee9
 8004f0c:	08004ee9 	.word	0x08004ee9
 8004f10:	08004ee9 	.word	0x08004ee9
 8004f14:	08004ee9 	.word	0x08004ee9
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004ee9 	.word	0x08004ee9
 8004f20:	08004ee9 	.word	0x08004ee9
 8004f24:	08004ee9 	.word	0x08004ee9
 8004f28:	08004ee9 	.word	0x08004ee9
 8004f2c:	08005079 	.word	0x08005079
 8004f30:	08004f9d 	.word	0x08004f9d
 8004f34:	0800505b 	.word	0x0800505b
 8004f38:	08004ee9 	.word	0x08004ee9
 8004f3c:	08004ee9 	.word	0x08004ee9
 8004f40:	0800509b 	.word	0x0800509b
 8004f44:	08004ee9 	.word	0x08004ee9
 8004f48:	08004f9d 	.word	0x08004f9d
 8004f4c:	08004ee9 	.word	0x08004ee9
 8004f50:	08004ee9 	.word	0x08004ee9
 8004f54:	08005063 	.word	0x08005063
 8004f58:	680b      	ldr	r3, [r1, #0]
 8004f5a:	1d1a      	adds	r2, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	600a      	str	r2, [r1, #0]
 8004f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0a3      	b.n	80050b4 <_printf_i+0x1f4>
 8004f6c:	6825      	ldr	r5, [r4, #0]
 8004f6e:	6808      	ldr	r0, [r1, #0]
 8004f70:	062e      	lsls	r6, r5, #24
 8004f72:	f100 0304 	add.w	r3, r0, #4
 8004f76:	d50a      	bpl.n	8004f8e <_printf_i+0xce>
 8004f78:	6805      	ldr	r5, [r0, #0]
 8004f7a:	600b      	str	r3, [r1, #0]
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	da03      	bge.n	8004f88 <_printf_i+0xc8>
 8004f80:	232d      	movs	r3, #45	; 0x2d
 8004f82:	426d      	negs	r5, r5
 8004f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f88:	485e      	ldr	r0, [pc, #376]	; (8005104 <_printf_i+0x244>)
 8004f8a:	230a      	movs	r3, #10
 8004f8c:	e019      	b.n	8004fc2 <_printf_i+0x102>
 8004f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f92:	6805      	ldr	r5, [r0, #0]
 8004f94:	600b      	str	r3, [r1, #0]
 8004f96:	bf18      	it	ne
 8004f98:	b22d      	sxthne	r5, r5
 8004f9a:	e7ef      	b.n	8004f7c <_printf_i+0xbc>
 8004f9c:	680b      	ldr	r3, [r1, #0]
 8004f9e:	6825      	ldr	r5, [r4, #0]
 8004fa0:	1d18      	adds	r0, r3, #4
 8004fa2:	6008      	str	r0, [r1, #0]
 8004fa4:	0628      	lsls	r0, r5, #24
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0xec>
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <_printf_i+0xf2>
 8004fac:	0669      	lsls	r1, r5, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0xe8>
 8004fb0:	881d      	ldrh	r5, [r3, #0]
 8004fb2:	4854      	ldr	r0, [pc, #336]	; (8005104 <_printf_i+0x244>)
 8004fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2308      	moveq	r3, #8
 8004fba:	230a      	movne	r3, #10
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fc2:	6866      	ldr	r6, [r4, #4]
 8004fc4:	60a6      	str	r6, [r4, #8]
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	bfa2      	ittt	ge
 8004fca:	6821      	ldrge	r1, [r4, #0]
 8004fcc:	f021 0104 	bicge.w	r1, r1, #4
 8004fd0:	6021      	strge	r1, [r4, #0]
 8004fd2:	b90d      	cbnz	r5, 8004fd8 <_printf_i+0x118>
 8004fd4:	2e00      	cmp	r6, #0
 8004fd6:	d04d      	beq.n	8005074 <_printf_i+0x1b4>
 8004fd8:	4616      	mov	r6, r2
 8004fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fde:	fb03 5711 	mls	r7, r3, r1, r5
 8004fe2:	5dc7      	ldrb	r7, [r0, r7]
 8004fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fe8:	462f      	mov	r7, r5
 8004fea:	42bb      	cmp	r3, r7
 8004fec:	460d      	mov	r5, r1
 8004fee:	d9f4      	bls.n	8004fda <_printf_i+0x11a>
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d10b      	bne.n	800500c <_printf_i+0x14c>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	07df      	lsls	r7, r3, #31
 8004ff8:	d508      	bpl.n	800500c <_printf_i+0x14c>
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	6861      	ldr	r1, [r4, #4]
 8004ffe:	4299      	cmp	r1, r3
 8005000:	bfde      	ittt	le
 8005002:	2330      	movle	r3, #48	; 0x30
 8005004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800500c:	1b92      	subs	r2, r2, r6
 800500e:	6122      	str	r2, [r4, #16]
 8005010:	f8cd a000 	str.w	sl, [sp]
 8005014:	464b      	mov	r3, r9
 8005016:	aa03      	add	r2, sp, #12
 8005018:	4621      	mov	r1, r4
 800501a:	4640      	mov	r0, r8
 800501c:	f7ff fee2 	bl	8004de4 <_printf_common>
 8005020:	3001      	adds	r0, #1
 8005022:	d14c      	bne.n	80050be <_printf_i+0x1fe>
 8005024:	f04f 30ff 	mov.w	r0, #4294967295
 8005028:	b004      	add	sp, #16
 800502a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502e:	4835      	ldr	r0, [pc, #212]	; (8005104 <_printf_i+0x244>)
 8005030:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	680e      	ldr	r6, [r1, #0]
 8005038:	061f      	lsls	r7, r3, #24
 800503a:	f856 5b04 	ldr.w	r5, [r6], #4
 800503e:	600e      	str	r6, [r1, #0]
 8005040:	d514      	bpl.n	800506c <_printf_i+0x1ac>
 8005042:	07d9      	lsls	r1, r3, #31
 8005044:	bf44      	itt	mi
 8005046:	f043 0320 	orrmi.w	r3, r3, #32
 800504a:	6023      	strmi	r3, [r4, #0]
 800504c:	b91d      	cbnz	r5, 8005056 <_printf_i+0x196>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f023 0320 	bic.w	r3, r3, #32
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	2310      	movs	r3, #16
 8005058:	e7b0      	b.n	8004fbc <_printf_i+0xfc>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f043 0320 	orr.w	r3, r3, #32
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	2378      	movs	r3, #120	; 0x78
 8005064:	4828      	ldr	r0, [pc, #160]	; (8005108 <_printf_i+0x248>)
 8005066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800506a:	e7e3      	b.n	8005034 <_printf_i+0x174>
 800506c:	065e      	lsls	r6, r3, #25
 800506e:	bf48      	it	mi
 8005070:	b2ad      	uxthmi	r5, r5
 8005072:	e7e6      	b.n	8005042 <_printf_i+0x182>
 8005074:	4616      	mov	r6, r2
 8005076:	e7bb      	b.n	8004ff0 <_printf_i+0x130>
 8005078:	680b      	ldr	r3, [r1, #0]
 800507a:	6826      	ldr	r6, [r4, #0]
 800507c:	6960      	ldr	r0, [r4, #20]
 800507e:	1d1d      	adds	r5, r3, #4
 8005080:	600d      	str	r5, [r1, #0]
 8005082:	0635      	lsls	r5, r6, #24
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	d501      	bpl.n	800508c <_printf_i+0x1cc>
 8005088:	6018      	str	r0, [r3, #0]
 800508a:	e002      	b.n	8005092 <_printf_i+0x1d2>
 800508c:	0671      	lsls	r1, r6, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0x1c8>
 8005090:	8018      	strh	r0, [r3, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	4616      	mov	r6, r2
 8005098:	e7ba      	b.n	8005010 <_printf_i+0x150>
 800509a:	680b      	ldr	r3, [r1, #0]
 800509c:	1d1a      	adds	r2, r3, #4
 800509e:	600a      	str	r2, [r1, #0]
 80050a0:	681e      	ldr	r6, [r3, #0]
 80050a2:	6862      	ldr	r2, [r4, #4]
 80050a4:	2100      	movs	r1, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f7fb f8a2 	bl	80001f0 <memchr>
 80050ac:	b108      	cbz	r0, 80050b2 <_printf_i+0x1f2>
 80050ae:	1b80      	subs	r0, r0, r6
 80050b0:	6060      	str	r0, [r4, #4]
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	2300      	movs	r3, #0
 80050b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050bc:	e7a8      	b.n	8005010 <_printf_i+0x150>
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	4632      	mov	r2, r6
 80050c2:	4649      	mov	r1, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	47d0      	blx	sl
 80050c8:	3001      	adds	r0, #1
 80050ca:	d0ab      	beq.n	8005024 <_printf_i+0x164>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	079b      	lsls	r3, r3, #30
 80050d0:	d413      	bmi.n	80050fa <_printf_i+0x23a>
 80050d2:	68e0      	ldr	r0, [r4, #12]
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	4298      	cmp	r0, r3
 80050d8:	bfb8      	it	lt
 80050da:	4618      	movlt	r0, r3
 80050dc:	e7a4      	b.n	8005028 <_printf_i+0x168>
 80050de:	2301      	movs	r3, #1
 80050e0:	4632      	mov	r2, r6
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	47d0      	blx	sl
 80050e8:	3001      	adds	r0, #1
 80050ea:	d09b      	beq.n	8005024 <_printf_i+0x164>
 80050ec:	3501      	adds	r5, #1
 80050ee:	68e3      	ldr	r3, [r4, #12]
 80050f0:	9903      	ldr	r1, [sp, #12]
 80050f2:	1a5b      	subs	r3, r3, r1
 80050f4:	42ab      	cmp	r3, r5
 80050f6:	dcf2      	bgt.n	80050de <_printf_i+0x21e>
 80050f8:	e7eb      	b.n	80050d2 <_printf_i+0x212>
 80050fa:	2500      	movs	r5, #0
 80050fc:	f104 0619 	add.w	r6, r4, #25
 8005100:	e7f5      	b.n	80050ee <_printf_i+0x22e>
 8005102:	bf00      	nop
 8005104:	080054f1 	.word	0x080054f1
 8005108:	08005502 	.word	0x08005502

0800510c <memmove>:
 800510c:	4288      	cmp	r0, r1
 800510e:	b510      	push	{r4, lr}
 8005110:	eb01 0402 	add.w	r4, r1, r2
 8005114:	d902      	bls.n	800511c <memmove+0x10>
 8005116:	4284      	cmp	r4, r0
 8005118:	4623      	mov	r3, r4
 800511a:	d807      	bhi.n	800512c <memmove+0x20>
 800511c:	1e43      	subs	r3, r0, #1
 800511e:	42a1      	cmp	r1, r4
 8005120:	d008      	beq.n	8005134 <memmove+0x28>
 8005122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800512a:	e7f8      	b.n	800511e <memmove+0x12>
 800512c:	4402      	add	r2, r0
 800512e:	4601      	mov	r1, r0
 8005130:	428a      	cmp	r2, r1
 8005132:	d100      	bne.n	8005136 <memmove+0x2a>
 8005134:	bd10      	pop	{r4, pc}
 8005136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800513a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800513e:	e7f7      	b.n	8005130 <memmove+0x24>

08005140 <_free_r>:
 8005140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005142:	2900      	cmp	r1, #0
 8005144:	d048      	beq.n	80051d8 <_free_r+0x98>
 8005146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514a:	9001      	str	r0, [sp, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f1a1 0404 	sub.w	r4, r1, #4
 8005152:	bfb8      	it	lt
 8005154:	18e4      	addlt	r4, r4, r3
 8005156:	f000 f8d3 	bl	8005300 <__malloc_lock>
 800515a:	4a20      	ldr	r2, [pc, #128]	; (80051dc <_free_r+0x9c>)
 800515c:	9801      	ldr	r0, [sp, #4]
 800515e:	6813      	ldr	r3, [r2, #0]
 8005160:	4615      	mov	r5, r2
 8005162:	b933      	cbnz	r3, 8005172 <_free_r+0x32>
 8005164:	6063      	str	r3, [r4, #4]
 8005166:	6014      	str	r4, [r2, #0]
 8005168:	b003      	add	sp, #12
 800516a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800516e:	f000 b8cd 	b.w	800530c <__malloc_unlock>
 8005172:	42a3      	cmp	r3, r4
 8005174:	d90b      	bls.n	800518e <_free_r+0x4e>
 8005176:	6821      	ldr	r1, [r4, #0]
 8005178:	1862      	adds	r2, r4, r1
 800517a:	4293      	cmp	r3, r2
 800517c:	bf04      	itt	eq
 800517e:	681a      	ldreq	r2, [r3, #0]
 8005180:	685b      	ldreq	r3, [r3, #4]
 8005182:	6063      	str	r3, [r4, #4]
 8005184:	bf04      	itt	eq
 8005186:	1852      	addeq	r2, r2, r1
 8005188:	6022      	streq	r2, [r4, #0]
 800518a:	602c      	str	r4, [r5, #0]
 800518c:	e7ec      	b.n	8005168 <_free_r+0x28>
 800518e:	461a      	mov	r2, r3
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b10b      	cbz	r3, 8005198 <_free_r+0x58>
 8005194:	42a3      	cmp	r3, r4
 8005196:	d9fa      	bls.n	800518e <_free_r+0x4e>
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	1855      	adds	r5, r2, r1
 800519c:	42a5      	cmp	r5, r4
 800519e:	d10b      	bne.n	80051b8 <_free_r+0x78>
 80051a0:	6824      	ldr	r4, [r4, #0]
 80051a2:	4421      	add	r1, r4
 80051a4:	1854      	adds	r4, r2, r1
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	6011      	str	r1, [r2, #0]
 80051aa:	d1dd      	bne.n	8005168 <_free_r+0x28>
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	6053      	str	r3, [r2, #4]
 80051b2:	4421      	add	r1, r4
 80051b4:	6011      	str	r1, [r2, #0]
 80051b6:	e7d7      	b.n	8005168 <_free_r+0x28>
 80051b8:	d902      	bls.n	80051c0 <_free_r+0x80>
 80051ba:	230c      	movs	r3, #12
 80051bc:	6003      	str	r3, [r0, #0]
 80051be:	e7d3      	b.n	8005168 <_free_r+0x28>
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	1961      	adds	r1, r4, r5
 80051c4:	428b      	cmp	r3, r1
 80051c6:	bf04      	itt	eq
 80051c8:	6819      	ldreq	r1, [r3, #0]
 80051ca:	685b      	ldreq	r3, [r3, #4]
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	bf04      	itt	eq
 80051d0:	1949      	addeq	r1, r1, r5
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	6054      	str	r4, [r2, #4]
 80051d6:	e7c7      	b.n	8005168 <_free_r+0x28>
 80051d8:	b003      	add	sp, #12
 80051da:	bd30      	pop	{r4, r5, pc}
 80051dc:	20000090 	.word	0x20000090

080051e0 <_malloc_r>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	1ccd      	adds	r5, r1, #3
 80051e4:	f025 0503 	bic.w	r5, r5, #3
 80051e8:	3508      	adds	r5, #8
 80051ea:	2d0c      	cmp	r5, #12
 80051ec:	bf38      	it	cc
 80051ee:	250c      	movcc	r5, #12
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	4606      	mov	r6, r0
 80051f4:	db01      	blt.n	80051fa <_malloc_r+0x1a>
 80051f6:	42a9      	cmp	r1, r5
 80051f8:	d903      	bls.n	8005202 <_malloc_r+0x22>
 80051fa:	230c      	movs	r3, #12
 80051fc:	6033      	str	r3, [r6, #0]
 80051fe:	2000      	movs	r0, #0
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005202:	f000 f87d 	bl	8005300 <__malloc_lock>
 8005206:	4921      	ldr	r1, [pc, #132]	; (800528c <_malloc_r+0xac>)
 8005208:	680a      	ldr	r2, [r1, #0]
 800520a:	4614      	mov	r4, r2
 800520c:	b99c      	cbnz	r4, 8005236 <_malloc_r+0x56>
 800520e:	4f20      	ldr	r7, [pc, #128]	; (8005290 <_malloc_r+0xb0>)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	b923      	cbnz	r3, 800521e <_malloc_r+0x3e>
 8005214:	4621      	mov	r1, r4
 8005216:	4630      	mov	r0, r6
 8005218:	f000 f862 	bl	80052e0 <_sbrk_r>
 800521c:	6038      	str	r0, [r7, #0]
 800521e:	4629      	mov	r1, r5
 8005220:	4630      	mov	r0, r6
 8005222:	f000 f85d 	bl	80052e0 <_sbrk_r>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d123      	bne.n	8005272 <_malloc_r+0x92>
 800522a:	230c      	movs	r3, #12
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	4630      	mov	r0, r6
 8005230:	f000 f86c 	bl	800530c <__malloc_unlock>
 8005234:	e7e3      	b.n	80051fe <_malloc_r+0x1e>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	1b5b      	subs	r3, r3, r5
 800523a:	d417      	bmi.n	800526c <_malloc_r+0x8c>
 800523c:	2b0b      	cmp	r3, #11
 800523e:	d903      	bls.n	8005248 <_malloc_r+0x68>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	441c      	add	r4, r3
 8005244:	6025      	str	r5, [r4, #0]
 8005246:	e004      	b.n	8005252 <_malloc_r+0x72>
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	42a2      	cmp	r2, r4
 800524c:	bf0c      	ite	eq
 800524e:	600b      	streq	r3, [r1, #0]
 8005250:	6053      	strne	r3, [r2, #4]
 8005252:	4630      	mov	r0, r6
 8005254:	f000 f85a 	bl	800530c <__malloc_unlock>
 8005258:	f104 000b 	add.w	r0, r4, #11
 800525c:	1d23      	adds	r3, r4, #4
 800525e:	f020 0007 	bic.w	r0, r0, #7
 8005262:	1ac2      	subs	r2, r0, r3
 8005264:	d0cc      	beq.n	8005200 <_malloc_r+0x20>
 8005266:	1a1b      	subs	r3, r3, r0
 8005268:	50a3      	str	r3, [r4, r2]
 800526a:	e7c9      	b.n	8005200 <_malloc_r+0x20>
 800526c:	4622      	mov	r2, r4
 800526e:	6864      	ldr	r4, [r4, #4]
 8005270:	e7cc      	b.n	800520c <_malloc_r+0x2c>
 8005272:	1cc4      	adds	r4, r0, #3
 8005274:	f024 0403 	bic.w	r4, r4, #3
 8005278:	42a0      	cmp	r0, r4
 800527a:	d0e3      	beq.n	8005244 <_malloc_r+0x64>
 800527c:	1a21      	subs	r1, r4, r0
 800527e:	4630      	mov	r0, r6
 8005280:	f000 f82e 	bl	80052e0 <_sbrk_r>
 8005284:	3001      	adds	r0, #1
 8005286:	d1dd      	bne.n	8005244 <_malloc_r+0x64>
 8005288:	e7cf      	b.n	800522a <_malloc_r+0x4a>
 800528a:	bf00      	nop
 800528c:	20000090 	.word	0x20000090
 8005290:	20000094 	.word	0x20000094

08005294 <_realloc_r>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	4607      	mov	r7, r0
 8005298:	4614      	mov	r4, r2
 800529a:	460e      	mov	r6, r1
 800529c:	b921      	cbnz	r1, 80052a8 <_realloc_r+0x14>
 800529e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052a2:	4611      	mov	r1, r2
 80052a4:	f7ff bf9c 	b.w	80051e0 <_malloc_r>
 80052a8:	b922      	cbnz	r2, 80052b4 <_realloc_r+0x20>
 80052aa:	f7ff ff49 	bl	8005140 <_free_r>
 80052ae:	4625      	mov	r5, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b4:	f000 f830 	bl	8005318 <_malloc_usable_size_r>
 80052b8:	42a0      	cmp	r0, r4
 80052ba:	d20f      	bcs.n	80052dc <_realloc_r+0x48>
 80052bc:	4621      	mov	r1, r4
 80052be:	4638      	mov	r0, r7
 80052c0:	f7ff ff8e 	bl	80051e0 <_malloc_r>
 80052c4:	4605      	mov	r5, r0
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d0f2      	beq.n	80052b0 <_realloc_r+0x1c>
 80052ca:	4631      	mov	r1, r6
 80052cc:	4622      	mov	r2, r4
 80052ce:	f7ff fbf7 	bl	8004ac0 <memcpy>
 80052d2:	4631      	mov	r1, r6
 80052d4:	4638      	mov	r0, r7
 80052d6:	f7ff ff33 	bl	8005140 <_free_r>
 80052da:	e7e9      	b.n	80052b0 <_realloc_r+0x1c>
 80052dc:	4635      	mov	r5, r6
 80052de:	e7e7      	b.n	80052b0 <_realloc_r+0x1c>

080052e0 <_sbrk_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d06      	ldr	r5, [pc, #24]	; (80052fc <_sbrk_r+0x1c>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7fc fa24 	bl	8001738 <_sbrk>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_sbrk_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_sbrk_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	200001c0 	.word	0x200001c0

08005300 <__malloc_lock>:
 8005300:	4801      	ldr	r0, [pc, #4]	; (8005308 <__malloc_lock+0x8>)
 8005302:	f000 b811 	b.w	8005328 <__retarget_lock_acquire_recursive>
 8005306:	bf00      	nop
 8005308:	200001c8 	.word	0x200001c8

0800530c <__malloc_unlock>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__malloc_unlock+0x8>)
 800530e:	f000 b80c 	b.w	800532a <__retarget_lock_release_recursive>
 8005312:	bf00      	nop
 8005314:	200001c8 	.word	0x200001c8

08005318 <_malloc_usable_size_r>:
 8005318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800531c:	1f18      	subs	r0, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfbc      	itt	lt
 8005322:	580b      	ldrlt	r3, [r1, r0]
 8005324:	18c0      	addlt	r0, r0, r3
 8005326:	4770      	bx	lr

08005328 <__retarget_lock_acquire_recursive>:
 8005328:	4770      	bx	lr

0800532a <__retarget_lock_release_recursive>:
 800532a:	4770      	bx	lr

0800532c <_init>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr

08005338 <_fini>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr
